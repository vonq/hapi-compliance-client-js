/**
 * HAPI Onboarding API
 * Simple API for handling employer onboarding
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BoardContract from '../model/BoardContract';
import Company from '../model/Company';
import CompanySubsidiary from '../model/CompanySubsidiary';
import PointOfContact from '../model/PointOfContact';

/**
* Companies service.
* @module api/CompaniesApi
* @version v1
*/
export default class CompaniesApi {

    /**
    * Constructs a new CompaniesApi. 
    * @alias module:api/CompaniesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the companiesContactsCreate operation.
     * @callback module:api/CompaniesApi~companiesContactsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointOfContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {module:model/PointOfContact} data 
     * @param {module:api/CompaniesApi~companiesContactsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointOfContact}
     */
    companiesContactsCreate(companyId, data, callback) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesContactsCreate");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointOfContact;
      return this.apiClient.callApi(
        '/companies/{company_id}/contacts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesContactsDelete operation.
     * @callback module:api/CompaniesApi~companiesContactsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompaniesApi~companiesContactsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companiesContactsDelete(companyId, id, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesContactsDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/companies/{company_id}/contacts/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesContactsList operation.
     * @callback module:api/CompaniesApi~companiesContactsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PointOfContact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {module:api/CompaniesApi~companiesContactsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PointOfContact>}
     */
    companiesContactsList(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsList");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PointOfContact];
      return this.apiClient.callApi(
        '/companies/{company_id}/contacts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesContactsPartialUpdate operation.
     * @callback module:api/CompaniesApi~companiesContactsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointOfContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/PointOfContact} data 
     * @param {module:api/CompaniesApi~companiesContactsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointOfContact}
     */
    companiesContactsPartialUpdate(companyId, id, data, callback) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsPartialUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesContactsPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesContactsPartialUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointOfContact;
      return this.apiClient.callApi(
        '/companies/{company_id}/contacts/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesContactsRead operation.
     * @callback module:api/CompaniesApi~companiesContactsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointOfContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompaniesApi~companiesContactsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointOfContact}
     */
    companiesContactsRead(companyId, id, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesContactsRead");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PointOfContact;
      return this.apiClient.callApi(
        '/companies/{company_id}/contacts/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesContactsUpdate operation.
     * @callback module:api/CompaniesApi~companiesContactsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointOfContact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/PointOfContact} data 
     * @param {module:api/CompaniesApi~companiesContactsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointOfContact}
     */
    companiesContactsUpdate(companyId, id, data, callback) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesContactsUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesContactsUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointOfContact;
      return this.apiClient.callApi(
        '/companies/{company_id}/contacts/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesCreate operation.
     * @callback module:api/CompaniesApi~companiesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Company} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Company} data 
     * @param {module:api/CompaniesApi~companiesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Company}
     */
    companiesCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Company;
      return this.apiClient.callApi(
        '/companies/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesDelete operation.
     * @callback module:api/CompaniesApi~companiesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/CompaniesApi~companiesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companiesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/companies/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesList operation.
     * @callback module:api/CompaniesApi~companiesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Company>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CompaniesApi~companiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Company>}
     */
    companiesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Company];
      return this.apiClient.callApi(
        '/companies/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesPartialUpdate operation.
     * @callback module:api/CompaniesApi~companiesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Company} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/Company} data 
     * @param {module:api/CompaniesApi~companiesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Company}
     */
    companiesPartialUpdate(id, data, callback) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Company;
      return this.apiClient.callApi(
        '/companies/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesRead operation.
     * @callback module:api/CompaniesApi~companiesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Company} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/CompaniesApi~companiesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Company}
     */
    companiesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Company;
      return this.apiClient.callApi(
        '/companies/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesBoardsCreate operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesBoardsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} subsidiaryId 
     * @param {module:model/BoardContract} data 
     * @param {module:api/CompaniesApi~companiesSubsidiariesBoardsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardContract}
     */
    companiesSubsidiariesBoardsCreate(companyId, subsidiaryId, data, callback) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsCreate");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesBoardsCreate");
      }

      let pathParams = {
        'company_id': companyId,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardContract;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesBoardsDelete operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesBoardsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} subsidiaryId 
     * @param {module:api/CompaniesApi~companiesSubsidiariesBoardsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companiesSubsidiariesBoardsDelete(companyId, id, subsidiaryId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesBoardsDelete");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesBoardsList operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesBoardsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoardContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} subsidiaryId 
     * @param {module:api/CompaniesApi~companiesSubsidiariesBoardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoardContract>}
     */
    companiesSubsidiariesBoardsList(companyId, subsidiaryId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsList");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsList");
      }

      let pathParams = {
        'company_id': companyId,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoardContract];
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesBoardsPartialUpdate operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesBoardsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} subsidiaryId 
     * @param {module:model/BoardContract} data 
     * @param {module:api/CompaniesApi~companiesSubsidiariesBoardsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardContract}
     */
    companiesSubsidiariesBoardsPartialUpdate(companyId, id, subsidiaryId, data, callback) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsPartialUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesBoardsPartialUpdate");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesBoardsPartialUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardContract;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesBoardsRead operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesBoardsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} subsidiaryId 
     * @param {module:api/CompaniesApi~companiesSubsidiariesBoardsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardContract}
     */
    companiesSubsidiariesBoardsRead(companyId, id, subsidiaryId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesBoardsRead");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsRead");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoardContract;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesBoardsUpdate operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesBoardsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoardContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} subsidiaryId 
     * @param {module:model/BoardContract} data 
     * @param {module:api/CompaniesApi~companiesSubsidiariesBoardsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoardContract}
     */
    companiesSubsidiariesBoardsUpdate(companyId, id, subsidiaryId, data, callback) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesBoardsUpdate");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesBoardsUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardContract;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesCreate operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanySubsidiary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {module:model/CompanySubsidiary} data 
     * @param {module:api/CompaniesApi~companiesSubsidiariesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanySubsidiary}
     */
    companiesSubsidiariesCreate(companyId, data, callback) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesCreate");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanySubsidiary;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesDelete operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompaniesApi~companiesSubsidiariesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companiesSubsidiariesDelete(companyId, id, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesList operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompanySubsidiary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {module:api/CompaniesApi~companiesSubsidiariesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CompanySubsidiary>}
     */
    companiesSubsidiariesList(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesList");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CompanySubsidiary];
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesPartialUpdate operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanySubsidiary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/CompanySubsidiary} data 
     * @param {module:api/CompaniesApi~companiesSubsidiariesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanySubsidiary}
     */
    companiesSubsidiariesPartialUpdate(companyId, id, data, callback) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesPartialUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesPartialUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanySubsidiary;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesRead operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanySubsidiary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/CompaniesApi~companiesSubsidiariesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanySubsidiary}
     */
    companiesSubsidiariesRead(companyId, id, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesRead");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompanySubsidiary;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesSubsidiariesUpdate operation.
     * @callback module:api/CompaniesApi~companiesSubsidiariesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanySubsidiary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:model/CompanySubsidiary} data 
     * @param {module:api/CompaniesApi~companiesSubsidiariesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanySubsidiary}
     */
    companiesSubsidiariesUpdate(companyId, id, data, callback) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanySubsidiary;
      return this.apiClient.callApi(
        '/companies/{company_id}/subsidiaries/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesUpdate operation.
     * @callback module:api/CompaniesApi~companiesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Company} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/Company} data 
     * @param {module:api/CompaniesApi~companiesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Company}
     */
    companiesUpdate(id, data, callback) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Company;
      return this.apiClient.callApi(
        '/companies/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitForReview operation.
     * @callback module:api/CompaniesApi~submitForReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint submits for review a company with all details filled.
     * @param {String} id 
     * @param {module:model/Company} data 
     * @param {module:api/CompaniesApi~submitForReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitForReview(id, data, callback) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitForReview");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling submitForReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/companies/{id}/submit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
