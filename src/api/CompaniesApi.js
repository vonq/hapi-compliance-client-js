/**
 * HAPI Onboarding API
 * Simple API for handling employer onboarding
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import BoardContract from '../model/BoardContract';
import Company from '../model/Company';
import CompanySubsidiary from '../model/CompanySubsidiary';
import PointOfContact from '../model/PointOfContact';

/**
* Companies service.
* @module api/CompaniesApi
* @version v1
*/
export default class CompaniesApi extends ApiClient {

    /**
    * Constructs a new CompaniesApi. 
    * @alias module:api/CompaniesApi
    * @class
    */
    constructor() {
      super();
      this.baseURL = null;
    }


    /**
     * @param {String} companyId 
     * @param {PointOfContact} data 
     * @return {Promise<PointOfContact>}
     */
    async companiesContactsCreate(companyId, data) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesContactsCreate");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointOfContact;

      return this.callApi(
        '/companies/{company_id}/contacts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @return {Promise}
     */
    async companiesContactsDelete(companyId, id) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesContactsDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/companies/{company_id}/contacts/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @return {Promise<Array.<PointOfContact>>}
     */
    async companiesContactsList(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsList");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PointOfContact];

      return this.callApi(
        '/companies/{company_id}/contacts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {PointOfContact} data 
     * @return {Promise<PointOfContact>}
     */
    async companiesContactsPartialUpdate(companyId, id, data) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsPartialUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesContactsPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesContactsPartialUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointOfContact;

      return this.callApi(
        '/companies/{company_id}/contacts/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @return {Promise<PointOfContact>}
     */
    async companiesContactsRead(companyId, id) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesContactsRead");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PointOfContact;

      return this.callApi(
        '/companies/{company_id}/contacts/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {PointOfContact} data 
     * @return {Promise<PointOfContact>}
     */
    async companiesContactsUpdate(companyId, id, data) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesContactsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesContactsUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesContactsUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PointOfContact;

      return this.callApi(
        '/companies/{company_id}/contacts/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Company} data 
     * @return {Promise<Company>}
     */
    async companiesCreate(data) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Company;

      return this.callApi(
        '/companies/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} id 
     * @return {Promise}
     */
    async companiesDelete(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/companies/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @return {Promise<Array.<Company>>}
     */
    async companiesList() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Company];

      return this.callApi(
        '/companies/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} id 
     * @param {Company} data 
     * @return {Promise<Company>}
     */
    async companiesPartialUpdate(id, data) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Company;

      return this.callApi(
        '/companies/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} id 
     * @return {Promise<Company>}
     */
    async companiesRead(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Company;

      return this.callApi(
        '/companies/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} subsidiaryId 
     * @param {BoardContract} data 
     * @return {Promise<BoardContract>}
     */
    async companiesSubsidiariesBoardsCreate(companyId, subsidiaryId, data) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsCreate");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesBoardsCreate");
      }

      let pathParams = {
        'company_id': companyId,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardContract;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} subsidiaryId 
     * @return {Promise}
     */
    async companiesSubsidiariesBoardsDelete(companyId, id, subsidiaryId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesBoardsDelete");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} subsidiaryId 
     * @return {Promise<Array.<BoardContract>>}
     */
    async companiesSubsidiariesBoardsList(companyId, subsidiaryId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsList");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsList");
      }

      let pathParams = {
        'company_id': companyId,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoardContract];

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} subsidiaryId 
     * @param {BoardContract} data 
     * @return {Promise<BoardContract>}
     */
    async companiesSubsidiariesBoardsPartialUpdate(companyId, id, subsidiaryId, data) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsPartialUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesBoardsPartialUpdate");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesBoardsPartialUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardContract;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} subsidiaryId 
     * @return {Promise<BoardContract>}
     */
    async companiesSubsidiariesBoardsRead(companyId, id, subsidiaryId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesBoardsRead");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsRead");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoardContract;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {String} subsidiaryId 
     * @param {BoardContract} data 
     * @return {Promise<BoardContract>}
     */
    async companiesSubsidiariesBoardsUpdate(companyId, id, subsidiaryId, data) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesBoardsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesBoardsUpdate");
      }
      // verify the required parameter 'subsidiaryId' is set
      if (subsidiaryId === undefined || subsidiaryId === null) {
        throw new Error("Missing the required parameter 'subsidiaryId' when calling companiesSubsidiariesBoardsUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesBoardsUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id,
        'subsidiary_id': subsidiaryId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BoardContract;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {CompanySubsidiary} data 
     * @return {Promise<CompanySubsidiary>}
     */
    async companiesSubsidiariesCreate(companyId, data) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesCreate");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanySubsidiary;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @return {Promise}
     */
    async companiesSubsidiariesDelete(companyId, id) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesDelete");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @return {Promise<Array.<CompanySubsidiary>>}
     */
    async companiesSubsidiariesList(companyId) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesList");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CompanySubsidiary];

      return this.callApi(
        '/companies/{company_id}/subsidiaries/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {CompanySubsidiary} data 
     * @return {Promise<CompanySubsidiary>}
     */
    async companiesSubsidiariesPartialUpdate(companyId, id, data) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesPartialUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesPartialUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanySubsidiary;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @return {Promise<CompanySubsidiary>}
     */
    async companiesSubsidiariesRead(companyId, id) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesRead");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompanySubsidiary;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {CompanySubsidiary} data 
     * @return {Promise<CompanySubsidiary>}
     */
    async companiesSubsidiariesUpdate(companyId, id, data) {
      let postBody = data;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companiesSubsidiariesUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesSubsidiariesUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesSubsidiariesUpdate");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanySubsidiary;

      return this.callApi(
        '/companies/{company_id}/subsidiaries/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} id 
     * @param {Company} data 
     * @return {Promise<Company>}
     */
    async companiesUpdate(id, data) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling companiesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Company;

      return this.callApi(
        '/companies/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * This endpoint submits for review a company with all details filled.
     * @param {String} id 
     * @param {Company} data 
     * @return {Promise}
     */
    async submitForReview(id, data) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling submitForReview");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling submitForReview");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/v1/Javascript',
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.callApi(
        '/companies/{id}/submit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


}
