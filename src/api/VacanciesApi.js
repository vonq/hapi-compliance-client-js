/**
 * HAPI Onboarding API
 * Simple API for handling employer onboarding
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Vacancy from '../model/Vacancy';

/**
* Vacancies service.
* @module api/VacanciesApi
* @version v1
*/
export default class VacanciesApi {

    /**
    * Constructs a new VacanciesApi. 
    * @alias module:api/VacanciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the vacanciesList operation.
     * @callback module:api/VacanciesApi~vacanciesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vacancy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {module:api/VacanciesApi~vacanciesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vacancy>}
     */
    vacanciesList(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling vacanciesList");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vacancy];
      return this.apiClient.callApi(
        '/vacancies/{company_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vacanciesRead operation.
     * @callback module:api/VacanciesApi~vacanciesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vacancy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} companyId 
     * @param {String} id 
     * @param {module:api/VacanciesApi~vacanciesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vacancy}
     */
    vacanciesRead(companyId, id, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling vacanciesRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vacanciesRead");
      }

      let pathParams = {
        'company_id': companyId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vacancy;
      return this.apiClient.callApi(
        '/vacancies/{company_id}/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
