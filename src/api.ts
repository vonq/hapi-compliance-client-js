/* tslint:disable */
/* eslint-disable */
/**
 * HAPI Onboarding API
 * Simple API for handling employer onboarding
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ATS
 */
export interface ATS {
    /**
     * 
     * @type {string}
     * @memberof ATS
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ATS
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface BoardContract
 */
export interface BoardContract {
    /**
     * 
     * @type {string}
     * @memberof BoardContract
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContract
     */
    'jobboard_code': string;
    /**
     * 
     * @type {boolean}
     * @memberof BoardContract
     */
    'is_valid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BoardContract
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContract
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardContract
     */
    'status'?: BoardContractStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof BoardContract
     */
    'state'?: BoardContractStateEnum;
    /**
     * 
     * @type {object}
     * @memberof BoardContract
     */
    'credentials'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof BoardContract
     */
    'company_subsidiary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BoardContract
     */
    'company'?: string | null;
}

export const BoardContractStatusEnum = {
    InReview: 'in_review',
    Active: 'active',
    Terminated: 'terminated'
} as const;

export type BoardContractStatusEnum = typeof BoardContractStatusEnum[keyof typeof BoardContractStatusEnum];
export const BoardContractStateEnum = {
    Al: 'AL',
    Ak: 'AK',
    As: 'AS',
    Az: 'AZ',
    Ar: 'AR',
    Aa: 'AA',
    Ae: 'AE',
    Ap: 'AP',
    Ca: 'CA',
    Co: 'CO',
    Ct: 'CT',
    De: 'DE',
    Dc: 'DC',
    Fl: 'FL',
    Ga: 'GA',
    Gu: 'GU',
    Hi: 'HI',
    Id: 'ID',
    Il: 'IL',
    In: 'IN',
    Ia: 'IA',
    Ks: 'KS',
    Ky: 'KY',
    La: 'LA',
    Me: 'ME',
    Md: 'MD',
    Ma: 'MA',
    Mi: 'MI',
    Mn: 'MN',
    Ms: 'MS',
    Mo: 'MO',
    Mt: 'MT',
    Ne: 'NE',
    Nv: 'NV',
    Nh: 'NH',
    Nj: 'NJ',
    Nm: 'NM',
    Ny: 'NY',
    Nc: 'NC',
    Nd: 'ND',
    Mp: 'MP',
    Oh: 'OH',
    Ok: 'OK',
    Or: 'OR',
    Pa: 'PA',
    Pr: 'PR',
    Ri: 'RI',
    Sc: 'SC',
    Sd: 'SD',
    Tn: 'TN',
    Tx: 'TX',
    Ut: 'UT',
    Vt: 'VT',
    Vi: 'VI',
    Va: 'VA',
    Wa: 'WA',
    Wv: 'WV',
    Wi: 'WI',
    Wy: 'WY'
} as const;

export type BoardContractStateEnum = typeof BoardContractStateEnum[keyof typeof BoardContractStateEnum];

/**
 * 
 * @export
 * @interface BoardPublic
 */
export interface BoardPublic {
    /**
     * 
     * @type {string}
     * @memberof BoardPublic
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BoardPublic
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardPublic
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof BoardPublic
     */
    'credentials_schema'?: string;
}
/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {ATS}
     * @memberof Company
     */
    'ats': ATS;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'ats_company_id': string;
    /**
     * 
     * @type {object}
     * @memberof Company
     */
    'ats_credentials': object;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'career_site_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'compliance_admin_point_of_contact'?: string | null;
    /**
     * 
     * @type {Set<string>}
     * @memberof Company
     */
    'contacts': Set<string>;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'created'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    'failed_audit_in_past_3_years'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'fein'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'hr_point_of_contact'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    'is_under_conciliation_agreements_with_ofccp'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'is_valid'?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'past_vendor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'postal_code': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'sein'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'state'?: CompanyStateEnum;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'status'?: CompanyStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'street_address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'uiid'?: string | null;
}

export const CompanyStateEnum = {
    Al: 'AL',
    Ak: 'AK',
    As: 'AS',
    Az: 'AZ',
    Ar: 'AR',
    Aa: 'AA',
    Ae: 'AE',
    Ap: 'AP',
    Ca: 'CA',
    Co: 'CO',
    Ct: 'CT',
    De: 'DE',
    Dc: 'DC',
    Fl: 'FL',
    Ga: 'GA',
    Gu: 'GU',
    Hi: 'HI',
    Id: 'ID',
    Il: 'IL',
    In: 'IN',
    Ia: 'IA',
    Ks: 'KS',
    Ky: 'KY',
    La: 'LA',
    Me: 'ME',
    Md: 'MD',
    Ma: 'MA',
    Mi: 'MI',
    Mn: 'MN',
    Ms: 'MS',
    Mo: 'MO',
    Mt: 'MT',
    Ne: 'NE',
    Nv: 'NV',
    Nh: 'NH',
    Nj: 'NJ',
    Nm: 'NM',
    Ny: 'NY',
    Nc: 'NC',
    Nd: 'ND',
    Mp: 'MP',
    Oh: 'OH',
    Ok: 'OK',
    Or: 'OR',
    Pa: 'PA',
    Pr: 'PR',
    Ri: 'RI',
    Sc: 'SC',
    Sd: 'SD',
    Tn: 'TN',
    Tx: 'TX',
    Ut: 'UT',
    Vt: 'VT',
    Vi: 'VI',
    Va: 'VA',
    Wa: 'WA',
    Wv: 'WV',
    Wi: 'WI',
    Wy: 'WY'
} as const;

export type CompanyStateEnum = typeof CompanyStateEnum[keyof typeof CompanyStateEnum];
export const CompanyStatusEnum = {
    InReview: 'in_review',
    Active: 'active',
    Terminated: 'terminated'
} as const;

export type CompanyStatusEnum = typeof CompanyStatusEnum[keyof typeof CompanyStatusEnum];

/**
 * 
 * @export
 * @interface CompanySubsidiary
 */
export interface CompanySubsidiary {
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompanySubsidiary
     */
    'valid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'ats_company_id': string;
    /**
     * 
     * @type {object}
     * @memberof CompanySubsidiary
     */
    'ats_credentials': object;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'street_address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'state'?: CompanySubsidiaryStateEnum;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'postal_code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'career_site_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'fein'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'sein'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'uiid'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'status'?: CompanySubsidiaryStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'letter_of_auth_docusign_envelope'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'ats'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'hr_point_of_contact'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'compliance_admin_point_of_contact'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'company'?: string | null;
}

export const CompanySubsidiaryStateEnum = {
    Al: 'AL',
    Ak: 'AK',
    As: 'AS',
    Az: 'AZ',
    Ar: 'AR',
    Aa: 'AA',
    Ae: 'AE',
    Ap: 'AP',
    Ca: 'CA',
    Co: 'CO',
    Ct: 'CT',
    De: 'DE',
    Dc: 'DC',
    Fl: 'FL',
    Ga: 'GA',
    Gu: 'GU',
    Hi: 'HI',
    Id: 'ID',
    Il: 'IL',
    In: 'IN',
    Ia: 'IA',
    Ks: 'KS',
    Ky: 'KY',
    La: 'LA',
    Me: 'ME',
    Md: 'MD',
    Ma: 'MA',
    Mi: 'MI',
    Mn: 'MN',
    Ms: 'MS',
    Mo: 'MO',
    Mt: 'MT',
    Ne: 'NE',
    Nv: 'NV',
    Nh: 'NH',
    Nj: 'NJ',
    Nm: 'NM',
    Ny: 'NY',
    Nc: 'NC',
    Nd: 'ND',
    Mp: 'MP',
    Oh: 'OH',
    Ok: 'OK',
    Or: 'OR',
    Pa: 'PA',
    Pr: 'PR',
    Ri: 'RI',
    Sc: 'SC',
    Sd: 'SD',
    Tn: 'TN',
    Tx: 'TX',
    Ut: 'UT',
    Vt: 'VT',
    Vi: 'VI',
    Va: 'VA',
    Wa: 'WA',
    Wv: 'WV',
    Wi: 'WI',
    Wy: 'WY'
} as const;

export type CompanySubsidiaryStateEnum = typeof CompanySubsidiaryStateEnum[keyof typeof CompanySubsidiaryStateEnum];
export const CompanySubsidiaryStatusEnum = {
    InReview: 'in_review',
    Active: 'active',
    Terminated: 'terminated'
} as const;

export type CompanySubsidiaryStatusEnum = typeof CompanySubsidiaryStatusEnum[keyof typeof CompanySubsidiaryStatusEnum];

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Vacancy>}
     * @memberof InlineResponse200
     */
    'results': Array<Vacancy>;
}
/**
 * 
 * @export
 * @interface LiteTransaction
 */
export interface LiteTransaction {
    /**
     * 
     * @type {string}
     * @memberof LiteTransaction
     */
    'transaction_id': string;
    /**
     * 
     * @type {string}
     * @memberof LiteTransaction
     */
    'transaction_type'?: LiteTransactionTransactionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LiteTransaction
     */
    'transaction_timestamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LiteTransaction
     */
    'distribution_type'?: LiteTransactionDistributionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LiteTransaction
     */
    'channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LiteTransaction
     */
    'confirmation_id'?: string | null;
}

export const LiteTransactionTransactionTypeEnum = {
    Receive: 'receive',
    Create: 'create',
    Wait: 'wait',
    Update: 'update',
    Delete: 'delete'
} as const;

export type LiteTransactionTransactionTypeEnum = typeof LiteTransactionTransactionTypeEnum[keyof typeof LiteTransactionTransactionTypeEnum];
export const LiteTransactionDistributionTypeEnum = {
    Ofccp: 'ofccp',
    Outreach: 'outreach',
    DiversityAndInclusion: 'diversity_and_inclusion'
} as const;

export type LiteTransactionDistributionTypeEnum = typeof LiteTransactionDistributionTypeEnum[keyof typeof LiteTransactionDistributionTypeEnum];

/**
 * 
 * @export
 * @interface PointOfContact
 */
export interface PointOfContact {
    /**
     * 
     * @type {Array<string>}
     * @memberof PointOfContact
     */
    'companies': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PointOfContact
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof PointOfContact
     */
    'email_address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PointOfContact
     */
    'full_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PointOfContact
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PointOfContact
     */
    'is_valid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PointOfContact
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PointOfContact
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof PointOfContact
     */
    'phone_number'?: string | null;
}
/**
 * 
 * @export
 * @interface Tier
 */
export interface Tier {
    /**
     * 
     * @type {string}
     * @memberof Tier
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tier
     */
    'name': string;
    /**
     * Tier\'s maximum jobs per year published
     * @type {number}
     * @memberof Tier
     */
    'maximum_vacancies_per_year': number;
    /**
     * Maximum number of jobs before the subscription is deactivated
     * @type {number}
     * @memberof Tier
     */
    'deactivation_limit': number;
    /**
     * Price per entity per year in dollars(ex. VAT), as invoiced to the ATS by VONQ
     * @type {string}
     * @memberof Tier
     */
    'vonq_price': string;
    /**
     * Proposed rate card price per entity per year in dollars (ex. VAT), as invoiced to the employer by the ATS
     * @type {string}
     * @memberof Tier
     */
    'rate_card_price': string;
}
/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'apply_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'ats_company_id': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'ats_id': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'company_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'confirmation_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'distribution_type'?: TransactionDistributionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'job_location'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'outreach_centre_email_address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'posting_timestamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'publication_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'req_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'state'?: TransactionStateEnum;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'transaction_id': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'transaction_method'?: TransactionTransactionMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'transaction_timestamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'transaction_type'?: TransactionTransactionTypeEnum;
}

export const TransactionDistributionTypeEnum = {
    Ofccp: 'ofccp',
    Outreach: 'outreach',
    DiversityAndInclusion: 'diversity_and_inclusion'
} as const;

export type TransactionDistributionTypeEnum = typeof TransactionDistributionTypeEnum[keyof typeof TransactionDistributionTypeEnum];
export const TransactionStateEnum = {
    Al: 'AL',
    Ak: 'AK',
    As: 'AS',
    Az: 'AZ',
    Ar: 'AR',
    Aa: 'AA',
    Ae: 'AE',
    Ap: 'AP',
    Ca: 'CA',
    Co: 'CO',
    Ct: 'CT',
    De: 'DE',
    Dc: 'DC',
    Fl: 'FL',
    Ga: 'GA',
    Gu: 'GU',
    Hi: 'HI',
    Id: 'ID',
    Il: 'IL',
    In: 'IN',
    Ia: 'IA',
    Ks: 'KS',
    Ky: 'KY',
    La: 'LA',
    Me: 'ME',
    Md: 'MD',
    Ma: 'MA',
    Mi: 'MI',
    Mn: 'MN',
    Ms: 'MS',
    Mo: 'MO',
    Mt: 'MT',
    Ne: 'NE',
    Nv: 'NV',
    Nh: 'NH',
    Nj: 'NJ',
    Nm: 'NM',
    Ny: 'NY',
    Nc: 'NC',
    Nd: 'ND',
    Mp: 'MP',
    Oh: 'OH',
    Ok: 'OK',
    Or: 'OR',
    Pa: 'PA',
    Pr: 'PR',
    Ri: 'RI',
    Sc: 'SC',
    Sd: 'SD',
    Tn: 'TN',
    Tx: 'TX',
    Ut: 'UT',
    Vt: 'VT',
    Vi: 'VI',
    Va: 'VA',
    Wa: 'WA',
    Wv: 'WV',
    Wi: 'WI',
    Wy: 'WY'
} as const;

export type TransactionStateEnum = typeof TransactionStateEnum[keyof typeof TransactionStateEnum];
export const TransactionTransactionMethodEnum = {
    Ftp: 'ftp',
    Api: 'api',
    Xml: 'xml',
    Email: 'email'
} as const;

export type TransactionTransactionMethodEnum = typeof TransactionTransactionMethodEnum[keyof typeof TransactionTransactionMethodEnum];
export const TransactionTransactionTypeEnum = {
    Receive: 'receive',
    Create: 'create',
    Wait: 'wait',
    Update: 'update',
    Delete: 'delete'
} as const;

export type TransactionTransactionTypeEnum = typeof TransactionTransactionTypeEnum[keyof typeof TransactionTransactionTypeEnum];

/**
 * 
 * @export
 * @interface Vacancy
 */
export interface Vacancy {
    /**
     * 
     * @type {string}
     * @memberof Vacancy
     */
    'id'?: string;
    /**
     * 
     * @type {Array<LiteTransaction>}
     * @memberof Vacancy
     */
    'transactions': Array<LiteTransaction>;
    /**
     * 
     * @type {string}
     * @memberof Vacancy
     */
    'compliance_met'?: string;
    /**
     * 
     * @type {string}
     * @memberof Vacancy
     */
    'req_number': string;
    /**
     * 
     * @type {string}
     * @memberof Vacancy
     */
    'company_name': string;
    /**
     * 
     * @type {string}
     * @memberof Vacancy
     */
    'job_location': string;
    /**
     * 
     * @type {string}
     * @memberof Vacancy
     */
    'state'?: VacancyStateEnum;
    /**
     * 
     * @type {string}
     * @memberof Vacancy
     */
    'job_title': string;
    /**
     * 
     * @type {string}
     * @memberof Vacancy
     */
    'apply_url': string;
    /**
     * 
     * @type {string}
     * @memberof Vacancy
     */
    'company': string;
}

export const VacancyStateEnum = {
    Al: 'AL',
    Ak: 'AK',
    As: 'AS',
    Az: 'AZ',
    Ar: 'AR',
    Aa: 'AA',
    Ae: 'AE',
    Ap: 'AP',
    Ca: 'CA',
    Co: 'CO',
    Ct: 'CT',
    De: 'DE',
    Dc: 'DC',
    Fl: 'FL',
    Ga: 'GA',
    Gu: 'GU',
    Hi: 'HI',
    Id: 'ID',
    Il: 'IL',
    In: 'IN',
    Ia: 'IA',
    Ks: 'KS',
    Ky: 'KY',
    La: 'LA',
    Me: 'ME',
    Md: 'MD',
    Ma: 'MA',
    Mi: 'MI',
    Mn: 'MN',
    Ms: 'MS',
    Mo: 'MO',
    Mt: 'MT',
    Ne: 'NE',
    Nv: 'NV',
    Nh: 'NH',
    Nj: 'NJ',
    Nm: 'NM',
    Ny: 'NY',
    Nc: 'NC',
    Nd: 'ND',
    Mp: 'MP',
    Oh: 'OH',
    Ok: 'OK',
    Or: 'OR',
    Pa: 'PA',
    Pr: 'PR',
    Ri: 'RI',
    Sc: 'SC',
    Sd: 'SD',
    Tn: 'TN',
    Tx: 'TX',
    Ut: 'UT',
    Vt: 'VT',
    Vi: 'VI',
    Va: 'VA',
    Wa: 'WA',
    Wv: 'WV',
    Wi: 'WI',
    Wy: 'WY'
} as const;

export type VacancyStateEnum = typeof VacancyStateEnum[keyof typeof VacancyStateEnum];


/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyId 
         * @param {PointOfContact} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsCreate: async (companyId: string, data: PointOfContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesContactsCreate', 'companyId', companyId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesContactsCreate', 'data', data)
            const localVarPath = `/companies/{company_id}/contacts/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsDelete: async (companyId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesContactsDelete', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesContactsDelete', 'id', id)
            const localVarPath = `/companies/{company_id}/contacts/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsList: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesContactsList', 'companyId', companyId)
            const localVarPath = `/companies/{company_id}/contacts/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {PointOfContact} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsPartialUpdate: async (companyId: string, id: string, data: PointOfContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesContactsPartialUpdate', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesContactsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesContactsPartialUpdate', 'data', data)
            const localVarPath = `/companies/{company_id}/contacts/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsRead: async (companyId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesContactsRead', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesContactsRead', 'id', id)
            const localVarPath = `/companies/{company_id}/contacts/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {PointOfContact} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsUpdate: async (companyId: string, id: string, data: PointOfContact, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesContactsUpdate', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesContactsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesContactsUpdate', 'data', data)
            const localVarPath = `/companies/{company_id}/contacts/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesCreate: async (data: Company, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesCreate', 'data', data)
            const localVarPath = `/companies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesDelete', 'id', id)
            const localVarPath = `/companies/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesPartialUpdate: async (id: string, data: Company, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesPartialUpdate', 'data', data)
            const localVarPath = `/companies/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesRead', 'id', id)
            const localVarPath = `/companies/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} subsidiaryId 
         * @param {BoardContract} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsCreate: async (companyId: string, subsidiaryId: string, data: BoardContract, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsCreate', 'companyId', companyId)
            // verify required parameter 'subsidiaryId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsCreate', 'subsidiaryId', subsidiaryId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsCreate', 'data', data)
            const localVarPath = `/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"subsidiary_id"}}`, encodeURIComponent(String(subsidiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsDelete: async (companyId: string, id: string, subsidiaryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsDelete', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsDelete', 'id', id)
            // verify required parameter 'subsidiaryId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsDelete', 'subsidiaryId', subsidiaryId)
            const localVarPath = `/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subsidiary_id"}}`, encodeURIComponent(String(subsidiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} subsidiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsList: async (companyId: string, subsidiaryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsList', 'companyId', companyId)
            // verify required parameter 'subsidiaryId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsList', 'subsidiaryId', subsidiaryId)
            const localVarPath = `/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"subsidiary_id"}}`, encodeURIComponent(String(subsidiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {BoardContract} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsPartialUpdate: async (companyId: string, id: string, subsidiaryId: string, data: BoardContract, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsPartialUpdate', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsPartialUpdate', 'id', id)
            // verify required parameter 'subsidiaryId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsPartialUpdate', 'subsidiaryId', subsidiaryId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsPartialUpdate', 'data', data)
            const localVarPath = `/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subsidiary_id"}}`, encodeURIComponent(String(subsidiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsRead: async (companyId: string, id: string, subsidiaryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsRead', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsRead', 'id', id)
            // verify required parameter 'subsidiaryId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsRead', 'subsidiaryId', subsidiaryId)
            const localVarPath = `/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subsidiary_id"}}`, encodeURIComponent(String(subsidiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {BoardContract} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsUpdate: async (companyId: string, id: string, subsidiaryId: string, data: BoardContract, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsUpdate', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsUpdate', 'id', id)
            // verify required parameter 'subsidiaryId' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsUpdate', 'subsidiaryId', subsidiaryId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesSubsidiariesBoardsUpdate', 'data', data)
            const localVarPath = `/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"subsidiary_id"}}`, encodeURIComponent(String(subsidiaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {CompanySubsidiary} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesCreate: async (companyId: string, data: CompanySubsidiary, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesCreate', 'companyId', companyId)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesSubsidiariesCreate', 'data', data)
            const localVarPath = `/companies/{company_id}/subsidiaries/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesDelete: async (companyId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesDelete', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesSubsidiariesDelete', 'id', id)
            const localVarPath = `/companies/{company_id}/subsidiaries/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesList: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesList', 'companyId', companyId)
            const localVarPath = `/companies/{company_id}/subsidiaries/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {CompanySubsidiary} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesPartialUpdate: async (companyId: string, id: string, data: CompanySubsidiary, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesPartialUpdate', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesSubsidiariesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesSubsidiariesPartialUpdate', 'data', data)
            const localVarPath = `/companies/{company_id}/subsidiaries/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesRead: async (companyId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesRead', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesSubsidiariesRead', 'id', id)
            const localVarPath = `/companies/{company_id}/subsidiaries/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {CompanySubsidiary} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesUpdate: async (companyId: string, id: string, data: CompanySubsidiary, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('companiesSubsidiariesUpdate', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesSubsidiariesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesSubsidiariesUpdate', 'data', data)
            const localVarPath = `/companies/{company_id}/subsidiaries/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesUpdate: async (id: string, data: Company, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('companiesUpdate', 'data', data)
            const localVarPath = `/companies/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint submits for review a company with all details filled.
         * @param {string} id 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitForReview: async (id: string, data: Company, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('submitForReview', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('submitForReview', 'data', data)
            const localVarPath = `/companies/{id}/submit/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyId 
         * @param {PointOfContact} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesContactsCreate(companyId: string, data: PointOfContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointOfContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesContactsCreate(companyId, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesContactsDelete(companyId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesContactsDelete(companyId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesContactsList(companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointOfContact>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesContactsList(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {PointOfContact} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesContactsPartialUpdate(companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointOfContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesContactsPartialUpdate(companyId, id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesContactsRead(companyId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointOfContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesContactsRead(companyId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {PointOfContact} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesContactsUpdate(companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointOfContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesContactsUpdate(companyId, id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesCreate(data: Company, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesPartialUpdate(id: string, data: Company, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} subsidiaryId 
         * @param {BoardContract} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesBoardsCreate(companyId: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardContract>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesBoardsCreate(companyId, subsidiaryId, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesBoardsDelete(companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesBoardsDelete(companyId, id, subsidiaryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} subsidiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesBoardsList(companyId: string, subsidiaryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BoardContract>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesBoardsList(companyId, subsidiaryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {BoardContract} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesBoardsPartialUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardContract>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesBoardsPartialUpdate(companyId, id, subsidiaryId, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesBoardsRead(companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardContract>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesBoardsRead(companyId, id, subsidiaryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {BoardContract} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesBoardsUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardContract>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesBoardsUpdate(companyId, id, subsidiaryId, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {CompanySubsidiary} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesCreate(companyId: string, data: CompanySubsidiary, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanySubsidiary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesCreate(companyId, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesDelete(companyId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesDelete(companyId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesList(companyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanySubsidiary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesList(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {CompanySubsidiary} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesPartialUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanySubsidiary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesPartialUpdate(companyId, id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesRead(companyId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanySubsidiary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesRead(companyId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {CompanySubsidiary} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesSubsidiariesUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanySubsidiary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesSubsidiariesUpdate(companyId, id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesUpdate(id: string, data: Company, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint submits for review a company with all details filled.
         * @param {string} id 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitForReview(id: string, data: Company, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitForReview(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyId 
         * @param {PointOfContact} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsCreate(companyId: string, data: PointOfContact, options?: any): AxiosPromise<PointOfContact> {
            return localVarFp.companiesContactsCreate(companyId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsDelete(companyId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.companiesContactsDelete(companyId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsList(companyId: string, options?: any): AxiosPromise<Array<PointOfContact>> {
            return localVarFp.companiesContactsList(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {PointOfContact} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsPartialUpdate(companyId: string, id: string, data: PointOfContact, options?: any): AxiosPromise<PointOfContact> {
            return localVarFp.companiesContactsPartialUpdate(companyId, id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsRead(companyId: string, id: string, options?: any): AxiosPromise<PointOfContact> {
            return localVarFp.companiesContactsRead(companyId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {PointOfContact} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsUpdate(companyId: string, id: string, data: PointOfContact, options?: any): AxiosPromise<PointOfContact> {
            return localVarFp.companiesContactsUpdate(companyId, id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesCreate(data: Company, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.companiesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesList(options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.companiesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesPartialUpdate(id: string, data: Company, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesRead(id: string, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} subsidiaryId 
         * @param {BoardContract} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsCreate(companyId: string, subsidiaryId: string, data: BoardContract, options?: any): AxiosPromise<BoardContract> {
            return localVarFp.companiesSubsidiariesBoardsCreate(companyId, subsidiaryId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsDelete(companyId: string, id: string, subsidiaryId: string, options?: any): AxiosPromise<void> {
            return localVarFp.companiesSubsidiariesBoardsDelete(companyId, id, subsidiaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} subsidiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsList(companyId: string, subsidiaryId: string, options?: any): AxiosPromise<Array<BoardContract>> {
            return localVarFp.companiesSubsidiariesBoardsList(companyId, subsidiaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {BoardContract} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsPartialUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: any): AxiosPromise<BoardContract> {
            return localVarFp.companiesSubsidiariesBoardsPartialUpdate(companyId, id, subsidiaryId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsRead(companyId: string, id: string, subsidiaryId: string, options?: any): AxiosPromise<BoardContract> {
            return localVarFp.companiesSubsidiariesBoardsRead(companyId, id, subsidiaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {string} subsidiaryId 
         * @param {BoardContract} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: any): AxiosPromise<BoardContract> {
            return localVarFp.companiesSubsidiariesBoardsUpdate(companyId, id, subsidiaryId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {CompanySubsidiary} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesCreate(companyId: string, data: CompanySubsidiary, options?: any): AxiosPromise<CompanySubsidiary> {
            return localVarFp.companiesSubsidiariesCreate(companyId, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesDelete(companyId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.companiesSubsidiariesDelete(companyId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesList(companyId: string, options?: any): AxiosPromise<Array<CompanySubsidiary>> {
            return localVarFp.companiesSubsidiariesList(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {CompanySubsidiary} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesPartialUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: any): AxiosPromise<CompanySubsidiary> {
            return localVarFp.companiesSubsidiariesPartialUpdate(companyId, id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesRead(companyId: string, id: string, options?: any): AxiosPromise<CompanySubsidiary> {
            return localVarFp.companiesSubsidiariesRead(companyId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {CompanySubsidiary} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: any): AxiosPromise<CompanySubsidiary> {
            return localVarFp.companiesSubsidiariesUpdate(companyId, id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesUpdate(id: string, data: Company, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint submits for review a company with all details filled.
         * @param {string} id 
         * @param {Company} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitForReview(id: string, data: Company, options?: any): AxiosPromise<void> {
            return localVarFp.submitForReview(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI {
    /**
     * 
     * @param {string} companyId 
     * @param {PointOfContact} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesContactsCreate(companyId: string, data: PointOfContact, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesContactsCreate(companyId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesContactsDelete(companyId: string, id: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesContactsDelete(companyId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesContactsList(companyId: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesContactsList(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {PointOfContact} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesContactsPartialUpdate(companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesContactsPartialUpdate(companyId, id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesContactsRead(companyId: string, id: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesContactsRead(companyId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {PointOfContact} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesContactsUpdate(companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesContactsUpdate(companyId, id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Company} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesCreate(data: Company, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesDelete(id: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesList(options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Company} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesPartialUpdate(id: string, data: Company, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesRead(id: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} subsidiaryId 
     * @param {BoardContract} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesBoardsCreate(companyId: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesBoardsCreate(companyId, subsidiaryId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {string} subsidiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesBoardsDelete(companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesBoardsDelete(companyId, id, subsidiaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} subsidiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesBoardsList(companyId: string, subsidiaryId: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesBoardsList(companyId, subsidiaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {string} subsidiaryId 
     * @param {BoardContract} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesBoardsPartialUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesBoardsPartialUpdate(companyId, id, subsidiaryId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {string} subsidiaryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesBoardsRead(companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesBoardsRead(companyId, id, subsidiaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {string} subsidiaryId 
     * @param {BoardContract} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesBoardsUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesBoardsUpdate(companyId, id, subsidiaryId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {CompanySubsidiary} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesCreate(companyId: string, data: CompanySubsidiary, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesCreate(companyId, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesDelete(companyId: string, id: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesDelete(companyId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesList(companyId: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesList(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {CompanySubsidiary} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesPartialUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesPartialUpdate(companyId, id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesRead(companyId: string, id: string, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesRead(companyId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {CompanySubsidiary} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesSubsidiariesUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesSubsidiariesUpdate(companyId, id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Company} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesUpdate(id: string, data: Company, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).companiesUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint submits for review a company with all details filled.
     * @param {string} id 
     * @param {Company} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public submitForReview(id: string, data: Company, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).submitForReview(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GetEnvelopeStatusApi - axios parameter creator
 * @export
 */
export const GetEnvelopeStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} envelopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvelopeStatusRead: async (envelopeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'envelopeId' is not null or undefined
            assertParamExists('getEnvelopeStatusRead', 'envelopeId', envelopeId)
            const localVarPath = `/get_envelope_status/{envelope_id}`
                .replace(`{${"envelope_id"}}`, encodeURIComponent(String(envelopeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetEnvelopeStatusApi - functional programming interface
 * @export
 */
export const GetEnvelopeStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetEnvelopeStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} envelopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvelopeStatusRead(envelopeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvelopeStatusRead(envelopeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetEnvelopeStatusApi - factory interface
 * @export
 */
export const GetEnvelopeStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetEnvelopeStatusApiFp(configuration)
    return {
        /**
         * 
         * @param {string} envelopeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvelopeStatusRead(envelopeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getEnvelopeStatusRead(envelopeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetEnvelopeStatusApi - object-oriented interface
 * @export
 * @class GetEnvelopeStatusApi
 * @extends {BaseAPI}
 */
export class GetEnvelopeStatusApi extends BaseAPI {
    /**
     * 
     * @param {string} envelopeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetEnvelopeStatusApi
     */
    public getEnvelopeStatusRead(envelopeId: string, options?: AxiosRequestConfig) {
        return GetEnvelopeStatusApiFp(this.configuration).getEnvelopeStatusRead(envelopeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobboardbystateApi - axios parameter creator
 * @export
 */
export const JobboardbystateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form 
         * @summary List job board by state code, including credentials schema
         * @param {string} stateCode 
         * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobBoardByStateCode: async (stateCode: string, stateCode2: 'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stateCode' is not null or undefined
            assertParamExists('listJobBoardByStateCode', 'stateCode', stateCode)
            // verify required parameter 'stateCode2' is not null or undefined
            assertParamExists('listJobBoardByStateCode', 'stateCode2', stateCode2)
            const localVarPath = `/jobboards/{state_code}/`
                .replace(`{${"state_code"}}`, encodeURIComponent(String(stateCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (stateCode2 !== undefined) {
                localVarQueryParameter['state_code'] = stateCode2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobboardbystateApi - functional programming interface
 * @export
 */
export const JobboardbystateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobboardbystateApiAxiosParamCreator(configuration)
    return {
        /**
         *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form 
         * @summary List job board by state code, including credentials schema
         * @param {string} stateCode 
         * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJobBoardByStateCode(stateCode: string, stateCode2: 'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJobBoardByStateCode(stateCode, stateCode2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobboardbystateApi - factory interface
 * @export
 */
export const JobboardbystateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobboardbystateApiFp(configuration)
    return {
        /**
         *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form 
         * @summary List job board by state code, including credentials schema
         * @param {string} stateCode 
         * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobBoardByStateCode(stateCode: string, stateCode2: 'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI', options?: any): AxiosPromise<BoardPublic> {
            return localVarFp.listJobBoardByStateCode(stateCode, stateCode2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobboardbystateApi - object-oriented interface
 * @export
 * @class JobboardbystateApi
 * @extends {BaseAPI}
 */
export class JobboardbystateApi extends BaseAPI {
    /**
     *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form 
     * @summary List job board by state code, including credentials schema
     * @param {string} stateCode 
     * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobboardbystateApi
     */
    public listJobBoardByStateCode(stateCode: string, stateCode2: 'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI', options?: AxiosRequestConfig) {
        return JobboardbystateApiFp(this.configuration).listJobBoardByStateCode(stateCode, stateCode2, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TiersApi - axios parameter creator
 * @export
 */
export const TiersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiersList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tiers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TiersApi - functional programming interface
 * @export
 */
export const TiersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TiersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tiersList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tier>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tiersList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TiersApi - factory interface
 * @export
 */
export const TiersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TiersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiersList(options?: any): AxiosPromise<Array<Tier>> {
            return localVarFp.tiersList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TiersApi - object-oriented interface
 * @export
 * @class TiersApi
 * @extends {BaseAPI}
 */
export class TiersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TiersApi
     */
    public tiersList(options?: AxiosRequestConfig) {
        return TiersApiFp(this.configuration).tiersList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Transaction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsCreate: async (data: Transaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('transactionsCreate', 'data', data)
            const localVarPath = `/transactions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRead: async (transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('transactionsRead', 'transactionId', transactionId)
            const localVarPath = `/transactions/{transaction_id}/`
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Transaction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsCreate(data: Transaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsRead(transactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsRead(transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * 
         * @param {Transaction} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsCreate(data: Transaction, options?: any): AxiosPromise<Transaction> {
            return localVarFp.transactionsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRead(transactionId: string, options?: any): AxiosPromise<Transaction> {
            return localVarFp.transactionsRead(transactionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * 
     * @param {Transaction} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsCreate(data: Transaction, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsRead(transactionId: string, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsRead(transactionId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VacanciesApi - axios parameter creator
 * @export
 */
export const VacanciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyId 
         * @param {string} [search] A search term.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesList: async (companyId: string, search?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('vacanciesList', 'companyId', companyId)
            const localVarPath = `/vacancies/{company_id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesRead: async (companyId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('vacanciesRead', 'companyId', companyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vacanciesRead', 'id', id)
            const localVarPath = `/vacancies/{company_id}/{id}/`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VacanciesApi - functional programming interface
 * @export
 */
export const VacanciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VacanciesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyId 
         * @param {string} [search] A search term.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vacanciesList(companyId: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vacanciesList(companyId, search, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vacanciesRead(companyId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vacancy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vacanciesRead(companyId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VacanciesApi - factory interface
 * @export
 */
export const VacanciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VacanciesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyId 
         * @param {string} [search] A search term.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesList(companyId: string, search?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.vacanciesList(companyId, search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesRead(companyId: string, id: string, options?: any): AxiosPromise<Vacancy> {
            return localVarFp.vacanciesRead(companyId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VacanciesApi - object-oriented interface
 * @export
 * @class VacanciesApi
 * @extends {BaseAPI}
 */
export class VacanciesApi extends BaseAPI {
    /**
     * 
     * @param {string} companyId 
     * @param {string} [search] A search term.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VacanciesApi
     */
    public vacanciesList(companyId: string, search?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return VacanciesApiFp(this.configuration).vacanciesList(companyId, search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VacanciesApi
     */
    public vacanciesRead(companyId: string, id: string, options?: AxiosRequestConfig) {
        return VacanciesApiFp(this.configuration).vacanciesRead(companyId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


