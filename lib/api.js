"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * HAPI Onboarding API
 * Simple API for handling employer onboarding
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VacanciesApi = exports.VacanciesApiFactory = exports.VacanciesApiFp = exports.VacanciesApiAxiosParamCreator = exports.TransactionsApi = exports.TransactionsApiFactory = exports.TransactionsApiFp = exports.TransactionsApiAxiosParamCreator = exports.TiersApi = exports.TiersApiFactory = exports.TiersApiFp = exports.TiersApiAxiosParamCreator = exports.JobboardbystateApi = exports.JobboardbystateApiFactory = exports.JobboardbystateApiFp = exports.JobboardbystateApiAxiosParamCreator = exports.GetEnvelopeStatusApi = exports.GetEnvelopeStatusApiFactory = exports.GetEnvelopeStatusApiFp = exports.GetEnvelopeStatusApiAxiosParamCreator = exports.CompaniesApi = exports.CompaniesApiFactory = exports.CompaniesApiFp = exports.CompaniesApiAxiosParamCreator = exports.VacancyStateEnum = exports.TransactionTransactionTypeEnum = exports.TransactionTransactionMethodEnum = exports.TransactionStateEnum = exports.TransactionDistributionTypeEnum = exports.LiteTransactionDistributionTypeEnum = exports.LiteTransactionTransactionTypeEnum = exports.CompanySubsidiaryStatusEnum = exports.CompanyStatusEnum = exports.BoardContractStateEnum = exports.BoardContractStatusEnum = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.BoardContractStatusEnum = {
    InReview: 'in_review',
    Active: 'active',
    Terminated: 'terminated'
};
exports.BoardContractStateEnum = {
    Al: 'AL',
    Ak: 'AK',
    As: 'AS',
    Az: 'AZ',
    Ar: 'AR',
    Aa: 'AA',
    Ae: 'AE',
    Ap: 'AP',
    Ca: 'CA',
    Co: 'CO',
    Ct: 'CT',
    De: 'DE',
    Dc: 'DC',
    Fl: 'FL',
    Ga: 'GA',
    Gu: 'GU',
    Hi: 'HI',
    Id: 'ID',
    Il: 'IL',
    In: 'IN',
    Ia: 'IA',
    Ks: 'KS',
    Ky: 'KY',
    La: 'LA',
    Me: 'ME',
    Md: 'MD',
    Ma: 'MA',
    Mi: 'MI',
    Mn: 'MN',
    Ms: 'MS',
    Mo: 'MO',
    Mt: 'MT',
    Ne: 'NE',
    Nv: 'NV',
    Nh: 'NH',
    Nj: 'NJ',
    Nm: 'NM',
    Ny: 'NY',
    Nc: 'NC',
    Nd: 'ND',
    Mp: 'MP',
    Oh: 'OH',
    Ok: 'OK',
    Or: 'OR',
    Pa: 'PA',
    Pr: 'PR',
    Ri: 'RI',
    Sc: 'SC',
    Sd: 'SD',
    Tn: 'TN',
    Tx: 'TX',
    Ut: 'UT',
    Vt: 'VT',
    Vi: 'VI',
    Va: 'VA',
    Wa: 'WA',
    Wv: 'WV',
    Wi: 'WI',
    Wy: 'WY'
};
exports.CompanyStatusEnum = {
    InReview: 'in_review',
    Active: 'active',
    Terminated: 'terminated'
};
exports.CompanySubsidiaryStatusEnum = {
    InReview: 'in_review',
    Active: 'active',
    Terminated: 'terminated'
};
exports.LiteTransactionTransactionTypeEnum = {
    Receive: 'receive',
    Create: 'create',
    Wait: 'wait',
    Update: 'update',
    Delete: 'delete'
};
exports.LiteTransactionDistributionTypeEnum = {
    Ofccp: 'ofccp',
    Outreach: 'outreach',
    DiversityAndInclusion: 'diversity_and_inclusion'
};
exports.TransactionDistributionTypeEnum = {
    Ofccp: 'ofccp',
    Outreach: 'outreach',
    DiversityAndInclusion: 'diversity_and_inclusion'
};
exports.TransactionStateEnum = {
    Al: 'AL',
    Ak: 'AK',
    As: 'AS',
    Az: 'AZ',
    Ar: 'AR',
    Aa: 'AA',
    Ae: 'AE',
    Ap: 'AP',
    Ca: 'CA',
    Co: 'CO',
    Ct: 'CT',
    De: 'DE',
    Dc: 'DC',
    Fl: 'FL',
    Ga: 'GA',
    Gu: 'GU',
    Hi: 'HI',
    Id: 'ID',
    Il: 'IL',
    In: 'IN',
    Ia: 'IA',
    Ks: 'KS',
    Ky: 'KY',
    La: 'LA',
    Me: 'ME',
    Md: 'MD',
    Ma: 'MA',
    Mi: 'MI',
    Mn: 'MN',
    Ms: 'MS',
    Mo: 'MO',
    Mt: 'MT',
    Ne: 'NE',
    Nv: 'NV',
    Nh: 'NH',
    Nj: 'NJ',
    Nm: 'NM',
    Ny: 'NY',
    Nc: 'NC',
    Nd: 'ND',
    Mp: 'MP',
    Oh: 'OH',
    Ok: 'OK',
    Or: 'OR',
    Pa: 'PA',
    Pr: 'PR',
    Ri: 'RI',
    Sc: 'SC',
    Sd: 'SD',
    Tn: 'TN',
    Tx: 'TX',
    Ut: 'UT',
    Vt: 'VT',
    Vi: 'VI',
    Va: 'VA',
    Wa: 'WA',
    Wv: 'WV',
    Wi: 'WI',
    Wy: 'WY'
};
exports.TransactionTransactionMethodEnum = {
    Ftp: 'ftp',
    Api: 'api',
    Xml: 'xml',
    Email: 'email'
};
exports.TransactionTransactionTypeEnum = {
    Receive: 'receive',
    Create: 'create',
    Wait: 'wait',
    Update: 'update',
    Delete: 'delete'
};
exports.VacancyStateEnum = {
    Al: 'AL',
    Ak: 'AK',
    As: 'AS',
    Az: 'AZ',
    Ar: 'AR',
    Aa: 'AA',
    Ae: 'AE',
    Ap: 'AP',
    Ca: 'CA',
    Co: 'CO',
    Ct: 'CT',
    De: 'DE',
    Dc: 'DC',
    Fl: 'FL',
    Ga: 'GA',
    Gu: 'GU',
    Hi: 'HI',
    Id: 'ID',
    Il: 'IL',
    In: 'IN',
    Ia: 'IA',
    Ks: 'KS',
    Ky: 'KY',
    La: 'LA',
    Me: 'ME',
    Md: 'MD',
    Ma: 'MA',
    Mi: 'MI',
    Mn: 'MN',
    Ms: 'MS',
    Mo: 'MO',
    Mt: 'MT',
    Ne: 'NE',
    Nv: 'NV',
    Nh: 'NH',
    Nj: 'NJ',
    Nm: 'NM',
    Ny: 'NY',
    Nc: 'NC',
    Nd: 'ND',
    Mp: 'MP',
    Oh: 'OH',
    Ok: 'OK',
    Or: 'OR',
    Pa: 'PA',
    Pr: 'PR',
    Ri: 'RI',
    Sc: 'SC',
    Sd: 'SD',
    Tn: 'TN',
    Tx: 'TX',
    Ut: 'UT',
    Vt: 'VT',
    Vi: 'VI',
    Va: 'VA',
    Wa: 'WA',
    Wv: 'WV',
    Wi: 'WI',
    Wy: 'WY'
};
/**
 * CompaniesApi - axios parameter creator
 * @export
 */
var CompaniesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} companyId
         * @param {PointOfContact} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsCreate: function (companyId, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsCreate', 'companyId', companyId);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsCreate', 'data', data);
                    localVarPath = "/companies/{company_id}/contacts/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsDelete: function (companyId, id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsDelete', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsDelete', 'id', id);
                    localVarPath = "/companies/{company_id}/contacts/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsList: function (companyId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsList', 'companyId', companyId);
                    localVarPath = "/companies/{company_id}/contacts/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {PointOfContact} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsPartialUpdate: function (companyId, id, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsPartialUpdate', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsPartialUpdate', 'id', id);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsPartialUpdate', 'data', data);
                    localVarPath = "/companies/{company_id}/contacts/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsRead: function (companyId, id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsRead', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsRead', 'id', id);
                    localVarPath = "/companies/{company_id}/contacts/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {PointOfContact} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsUpdate: function (companyId, id, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsUpdate', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsUpdate', 'id', id);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesContactsUpdate', 'data', data);
                    localVarPath = "/companies/{company_id}/contacts/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesCreate: function (data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesCreate', 'data', data);
                    localVarPath = "/companies/";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesDelete: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesDelete', 'id', id);
                    localVarPath = "/companies/{id}/"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesList: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/companies/";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesPartialUpdate: function (id, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesPartialUpdate', 'id', id);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesPartialUpdate', 'data', data);
                    localVarPath = "/companies/{id}/"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesRead: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesRead', 'id', id);
                    localVarPath = "/companies/{id}/"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} subsidiaryId
         * @param {BoardContract} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsCreate: function (companyId, subsidiaryId, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsCreate', 'companyId', companyId);
                    // verify required parameter 'subsidiaryId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsCreate', 'subsidiaryId', subsidiaryId);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsCreate', 'data', data);
                    localVarPath = "/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("subsidiary_id", "}"), encodeURIComponent(String(subsidiaryId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsDelete: function (companyId, id, subsidiaryId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsDelete', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsDelete', 'id', id);
                    // verify required parameter 'subsidiaryId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsDelete', 'subsidiaryId', subsidiaryId);
                    localVarPath = "/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                        .replace("{".concat("subsidiary_id", "}"), encodeURIComponent(String(subsidiaryId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} subsidiaryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsList: function (companyId, subsidiaryId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsList', 'companyId', companyId);
                    // verify required parameter 'subsidiaryId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsList', 'subsidiaryId', subsidiaryId);
                    localVarPath = "/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("subsidiary_id", "}"), encodeURIComponent(String(subsidiaryId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {BoardContract} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsPartialUpdate: function (companyId, id, subsidiaryId, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsPartialUpdate', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsPartialUpdate', 'id', id);
                    // verify required parameter 'subsidiaryId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsPartialUpdate', 'subsidiaryId', subsidiaryId);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsPartialUpdate', 'data', data);
                    localVarPath = "/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                        .replace("{".concat("subsidiary_id", "}"), encodeURIComponent(String(subsidiaryId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsRead: function (companyId, id, subsidiaryId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsRead', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsRead', 'id', id);
                    // verify required parameter 'subsidiaryId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsRead', 'subsidiaryId', subsidiaryId);
                    localVarPath = "/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                        .replace("{".concat("subsidiary_id", "}"), encodeURIComponent(String(subsidiaryId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {BoardContract} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsUpdate: function (companyId, id, subsidiaryId, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsUpdate', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsUpdate', 'id', id);
                    // verify required parameter 'subsidiaryId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsUpdate', 'subsidiaryId', subsidiaryId);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesBoardsUpdate', 'data', data);
                    localVarPath = "/companies/{company_id}/subsidiaries/{subsidiary_id}/boards/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                        .replace("{".concat("subsidiary_id", "}"), encodeURIComponent(String(subsidiaryId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {CompanySubsidiary} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesCreate: function (companyId, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesCreate', 'companyId', companyId);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesCreate', 'data', data);
                    localVarPath = "/companies/{company_id}/subsidiaries/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesDelete: function (companyId, id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesDelete', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesDelete', 'id', id);
                    localVarPath = "/companies/{company_id}/subsidiaries/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesList: function (companyId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesList', 'companyId', companyId);
                    localVarPath = "/companies/{company_id}/subsidiaries/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {CompanySubsidiary} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesPartialUpdate: function (companyId, id, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesPartialUpdate', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesPartialUpdate', 'id', id);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesPartialUpdate', 'data', data);
                    localVarPath = "/companies/{company_id}/subsidiaries/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesRead: function (companyId, id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesRead', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesRead', 'id', id);
                    localVarPath = "/companies/{company_id}/subsidiaries/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {CompanySubsidiary} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesUpdate: function (companyId, id, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesUpdate', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesUpdate', 'id', id);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesSubsidiariesUpdate', 'data', data);
                    localVarPath = "/companies/{company_id}/subsidiaries/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesUpdate: function (id, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('companiesUpdate', 'id', id);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('companiesUpdate', 'data', data);
                    localVarPath = "/companies/{id}/"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * This endpoint submits for review a company with all details filled.
         * @param {string} id
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitForReview: function (id, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('submitForReview', 'id', id);
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('submitForReview', 'data', data);
                    localVarPath = "/companies/{id}/submit/"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.CompaniesApiAxiosParamCreator = CompaniesApiAxiosParamCreator;
/**
 * CompaniesApi - functional programming interface
 * @export
 */
var CompaniesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CompaniesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} companyId
         * @param {PointOfContact} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsCreate: function (companyId, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesContactsCreate(companyId, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsDelete: function (companyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesContactsDelete(companyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsList: function (companyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesContactsList(companyId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {PointOfContact} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsPartialUpdate: function (companyId, id, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesContactsPartialUpdate(companyId, id, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsRead: function (companyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesContactsRead(companyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {PointOfContact} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsUpdate: function (companyId, id, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesContactsUpdate(companyId, id, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesCreate: function (data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesCreate(data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesList: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesList(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesPartialUpdate: function (id, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesPartialUpdate(id, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesRead: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesRead(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} subsidiaryId
         * @param {BoardContract} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsCreate: function (companyId, subsidiaryId, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesBoardsCreate(companyId, subsidiaryId, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsDelete: function (companyId, id, subsidiaryId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesBoardsDelete(companyId, id, subsidiaryId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} subsidiaryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsList: function (companyId, subsidiaryId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesBoardsList(companyId, subsidiaryId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {BoardContract} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsPartialUpdate: function (companyId, id, subsidiaryId, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesBoardsPartialUpdate(companyId, id, subsidiaryId, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsRead: function (companyId, id, subsidiaryId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesBoardsRead(companyId, id, subsidiaryId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {BoardContract} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsUpdate: function (companyId, id, subsidiaryId, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesBoardsUpdate(companyId, id, subsidiaryId, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {CompanySubsidiary} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesCreate: function (companyId, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesCreate(companyId, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesDelete: function (companyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesDelete(companyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesList: function (companyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesList(companyId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {CompanySubsidiary} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesPartialUpdate: function (companyId, id, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesPartialUpdate(companyId, id, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesRead: function (companyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesRead(companyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {CompanySubsidiary} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesUpdate: function (companyId, id, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesSubsidiariesUpdate(companyId, id, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesUpdate: function (id, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.companiesUpdate(id, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint submits for review a company with all details filled.
         * @param {string} id
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitForReview: function (id, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.submitForReview(id, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.CompaniesApiFp = CompaniesApiFp;
/**
 * CompaniesApi - factory interface
 * @export
 */
var CompaniesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CompaniesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} companyId
         * @param {PointOfContact} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsCreate: function (companyId, data, options) {
            return localVarFp.companiesContactsCreate(companyId, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsDelete: function (companyId, id, options) {
            return localVarFp.companiesContactsDelete(companyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsList: function (companyId, options) {
            return localVarFp.companiesContactsList(companyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {PointOfContact} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsPartialUpdate: function (companyId, id, data, options) {
            return localVarFp.companiesContactsPartialUpdate(companyId, id, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsRead: function (companyId, id, options) {
            return localVarFp.companiesContactsRead(companyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {PointOfContact} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesContactsUpdate: function (companyId, id, data, options) {
            return localVarFp.companiesContactsUpdate(companyId, id, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesCreate: function (data, options) {
            return localVarFp.companiesCreate(data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesDelete: function (id, options) {
            return localVarFp.companiesDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesList: function (options) {
            return localVarFp.companiesList(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesPartialUpdate: function (id, data, options) {
            return localVarFp.companiesPartialUpdate(id, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesRead: function (id, options) {
            return localVarFp.companiesRead(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} subsidiaryId
         * @param {BoardContract} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsCreate: function (companyId, subsidiaryId, data, options) {
            return localVarFp.companiesSubsidiariesBoardsCreate(companyId, subsidiaryId, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsDelete: function (companyId, id, subsidiaryId, options) {
            return localVarFp.companiesSubsidiariesBoardsDelete(companyId, id, subsidiaryId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} subsidiaryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsList: function (companyId, subsidiaryId, options) {
            return localVarFp.companiesSubsidiariesBoardsList(companyId, subsidiaryId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {BoardContract} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsPartialUpdate: function (companyId, id, subsidiaryId, data, options) {
            return localVarFp.companiesSubsidiariesBoardsPartialUpdate(companyId, id, subsidiaryId, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsRead: function (companyId, id, subsidiaryId, options) {
            return localVarFp.companiesSubsidiariesBoardsRead(companyId, id, subsidiaryId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {string} subsidiaryId
         * @param {BoardContract} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesBoardsUpdate: function (companyId, id, subsidiaryId, data, options) {
            return localVarFp.companiesSubsidiariesBoardsUpdate(companyId, id, subsidiaryId, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {CompanySubsidiary} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesCreate: function (companyId, data, options) {
            return localVarFp.companiesSubsidiariesCreate(companyId, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesDelete: function (companyId, id, options) {
            return localVarFp.companiesSubsidiariesDelete(companyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesList: function (companyId, options) {
            return localVarFp.companiesSubsidiariesList(companyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {CompanySubsidiary} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesPartialUpdate: function (companyId, id, data, options) {
            return localVarFp.companiesSubsidiariesPartialUpdate(companyId, id, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesRead: function (companyId, id, options) {
            return localVarFp.companiesSubsidiariesRead(companyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {CompanySubsidiary} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesSubsidiariesUpdate: function (companyId, id, data, options) {
            return localVarFp.companiesSubsidiariesUpdate(companyId, id, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesUpdate: function (id, data, options) {
            return localVarFp.companiesUpdate(id, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint submits for review a company with all details filled.
         * @param {string} id
         * @param {Company} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitForReview: function (id, data, options) {
            return localVarFp.submitForReview(id, data, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CompaniesApiFactory = CompaniesApiFactory;
/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
var CompaniesApi = /** @class */ (function (_super) {
    __extends(CompaniesApi, _super);
    function CompaniesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} companyId
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesContactsCreate = function (companyId, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesContactsCreate(companyId, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesContactsDelete = function (companyId, id, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesContactsDelete(companyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesContactsList = function (companyId, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesContactsList(companyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesContactsPartialUpdate = function (companyId, id, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesContactsPartialUpdate(companyId, id, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesContactsRead = function (companyId, id, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesContactsRead(companyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesContactsUpdate = function (companyId, id, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesContactsUpdate(companyId, id, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesCreate = function (data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesCreate(data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesDelete = function (id, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesList = function (options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesList(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesPartialUpdate = function (id, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesPartialUpdate(id, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesRead = function (id, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesRead(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesBoardsCreate = function (companyId, subsidiaryId, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesBoardsCreate(companyId, subsidiaryId, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesBoardsDelete = function (companyId, id, subsidiaryId, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesBoardsDelete(companyId, id, subsidiaryId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesBoardsList = function (companyId, subsidiaryId, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesBoardsList(companyId, subsidiaryId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesBoardsPartialUpdate = function (companyId, id, subsidiaryId, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesBoardsPartialUpdate(companyId, id, subsidiaryId, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesBoardsRead = function (companyId, id, subsidiaryId, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesBoardsRead(companyId, id, subsidiaryId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesBoardsUpdate = function (companyId, id, subsidiaryId, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesBoardsUpdate(companyId, id, subsidiaryId, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesCreate = function (companyId, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesCreate(companyId, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesDelete = function (companyId, id, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesDelete(companyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesList = function (companyId, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesList(companyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesPartialUpdate = function (companyId, id, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesPartialUpdate(companyId, id, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesRead = function (companyId, id, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesRead(companyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesSubsidiariesUpdate = function (companyId, id, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesSubsidiariesUpdate(companyId, id, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.companiesUpdate = function (id, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).companiesUpdate(id, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint submits for review a company with all details filled.
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    CompaniesApi.prototype.submitForReview = function (id, data, options) {
        var _this = this;
        return (0, exports.CompaniesApiFp)(this.configuration).submitForReview(id, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CompaniesApi;
}(base_1.BaseAPI));
exports.CompaniesApi = CompaniesApi;
/**
 * GetEnvelopeStatusApi - axios parameter creator
 * @export
 */
var GetEnvelopeStatusApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} envelopeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvelopeStatusRead: function (envelopeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'envelopeId' is not null or undefined
                    (0, common_1.assertParamExists)('getEnvelopeStatusRead', 'envelopeId', envelopeId);
                    localVarPath = "/get_envelope_status/{envelope_id}"
                        .replace("{".concat("envelope_id", "}"), encodeURIComponent(String(envelopeId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.GetEnvelopeStatusApiAxiosParamCreator = GetEnvelopeStatusApiAxiosParamCreator;
/**
 * GetEnvelopeStatusApi - functional programming interface
 * @export
 */
var GetEnvelopeStatusApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.GetEnvelopeStatusApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} envelopeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvelopeStatusRead: function (envelopeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEnvelopeStatusRead(envelopeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.GetEnvelopeStatusApiFp = GetEnvelopeStatusApiFp;
/**
 * GetEnvelopeStatusApi - factory interface
 * @export
 */
var GetEnvelopeStatusApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.GetEnvelopeStatusApiFp)(configuration);
    return {
        /**
         *
         * @param {string} envelopeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvelopeStatusRead: function (envelopeId, options) {
            return localVarFp.getEnvelopeStatusRead(envelopeId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.GetEnvelopeStatusApiFactory = GetEnvelopeStatusApiFactory;
/**
 * GetEnvelopeStatusApi - object-oriented interface
 * @export
 * @class GetEnvelopeStatusApi
 * @extends {BaseAPI}
 */
var GetEnvelopeStatusApi = /** @class */ (function (_super) {
    __extends(GetEnvelopeStatusApi, _super);
    function GetEnvelopeStatusApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} envelopeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetEnvelopeStatusApi
     */
    GetEnvelopeStatusApi.prototype.getEnvelopeStatusRead = function (envelopeId, options) {
        var _this = this;
        return (0, exports.GetEnvelopeStatusApiFp)(this.configuration).getEnvelopeStatusRead(envelopeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GetEnvelopeStatusApi;
}(base_1.BaseAPI));
exports.GetEnvelopeStatusApi = GetEnvelopeStatusApi;
/**
 * JobboardbystateApi - axios parameter creator
 * @export
 */
var JobboardbystateApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form
         * @summary List job board by state code, including credentials schema
         * @param {string} stateCode
         * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobBoardByStateCode: function (stateCode, stateCode2, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'stateCode' is not null or undefined
                    (0, common_1.assertParamExists)('listJobBoardByStateCode', 'stateCode', stateCode);
                    // verify required parameter 'stateCode2' is not null or undefined
                    (0, common_1.assertParamExists)('listJobBoardByStateCode', 'stateCode2', stateCode2);
                    localVarPath = "/jobboards/{state_code}/"
                        .replace("{".concat("state_code", "}"), encodeURIComponent(String(stateCode)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    if (stateCode2 !== undefined) {
                        localVarQueryParameter['state_code'] = stateCode2;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.JobboardbystateApiAxiosParamCreator = JobboardbystateApiAxiosParamCreator;
/**
 * JobboardbystateApi - functional programming interface
 * @export
 */
var JobboardbystateApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.JobboardbystateApiAxiosParamCreator)(configuration);
    return {
        /**
         *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form
         * @summary List job board by state code, including credentials schema
         * @param {string} stateCode
         * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobBoardByStateCode: function (stateCode, stateCode2, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listJobBoardByStateCode(stateCode, stateCode2, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.JobboardbystateApiFp = JobboardbystateApiFp;
/**
 * JobboardbystateApi - factory interface
 * @export
 */
var JobboardbystateApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.JobboardbystateApiFp)(configuration);
    return {
        /**
         *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form
         * @summary List job board by state code, including credentials schema
         * @param {string} stateCode
         * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobBoardByStateCode: function (stateCode, stateCode2, options) {
            return localVarFp.listJobBoardByStateCode(stateCode, stateCode2, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.JobboardbystateApiFactory = JobboardbystateApiFactory;
/**
 * JobboardbystateApi - object-oriented interface
 * @export
 * @class JobboardbystateApi
 * @extends {BaseAPI}
 */
var JobboardbystateApi = /** @class */ (function (_super) {
    __extends(JobboardbystateApi, _super);
    function JobboardbystateApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form
     * @summary List job board by state code, including credentials schema
     * @param {string} stateCode
     * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobboardbystateApi
     */
    JobboardbystateApi.prototype.listJobBoardByStateCode = function (stateCode, stateCode2, options) {
        var _this = this;
        return (0, exports.JobboardbystateApiFp)(this.configuration).listJobBoardByStateCode(stateCode, stateCode2, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return JobboardbystateApi;
}(base_1.BaseAPI));
exports.JobboardbystateApi = JobboardbystateApi;
/**
 * TiersApi - axios parameter creator
 * @export
 */
var TiersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiersList: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/tiers/";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.TiersApiAxiosParamCreator = TiersApiAxiosParamCreator;
/**
 * TiersApi - functional programming interface
 * @export
 */
var TiersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TiersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiersList: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.tiersList(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TiersApiFp = TiersApiFp;
/**
 * TiersApi - factory interface
 * @export
 */
var TiersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TiersApiFp)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tiersList: function (options) {
            return localVarFp.tiersList(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TiersApiFactory = TiersApiFactory;
/**
 * TiersApi - object-oriented interface
 * @export
 * @class TiersApi
 * @extends {BaseAPI}
 */
var TiersApi = /** @class */ (function (_super) {
    __extends(TiersApi, _super);
    function TiersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TiersApi
     */
    TiersApi.prototype.tiersList = function (options) {
        var _this = this;
        return (0, exports.TiersApiFp)(this.configuration).tiersList(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TiersApi;
}(base_1.BaseAPI));
exports.TiersApi = TiersApi;
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
var TransactionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {Transaction} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsCreate: function (data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'data' is not null or undefined
                    (0, common_1.assertParamExists)('transactionsCreate', 'data', data);
                    localVarPath = "/transactions/";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(data, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRead: function (transactionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'transactionId' is not null or undefined
                    (0, common_1.assertParamExists)('transactionsRead', 'transactionId', transactionId);
                    localVarPath = "/transactions/{transaction_id}/"
                        .replace("{".concat("transaction_id", "}"), encodeURIComponent(String(transactionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.TransactionsApiAxiosParamCreator = TransactionsApiAxiosParamCreator;
/**
 * TransactionsApi - functional programming interface
 * @export
 */
var TransactionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TransactionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {Transaction} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsCreate: function (data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.transactionsCreate(data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRead: function (transactionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.transactionsRead(transactionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TransactionsApiFp = TransactionsApiFp;
/**
 * TransactionsApi - factory interface
 * @export
 */
var TransactionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TransactionsApiFp)(configuration);
    return {
        /**
         *
         * @param {Transaction} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsCreate: function (data, options) {
            return localVarFp.transactionsCreate(data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} transactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRead: function (transactionId, options) {
            return localVarFp.transactionsRead(transactionId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TransactionsApiFactory = TransactionsApiFactory;
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
var TransactionsApi = /** @class */ (function (_super) {
    __extends(TransactionsApi, _super);
    function TransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {Transaction} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.transactionsCreate = function (data, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).transactionsCreate(data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.transactionsRead = function (transactionId, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).transactionsRead(transactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TransactionsApi;
}(base_1.BaseAPI));
exports.TransactionsApi = TransactionsApi;
/**
 * VacanciesApi - axios parameter creator
 * @export
 */
var VacanciesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesList: function (companyId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('vacanciesList', 'companyId', companyId);
                    localVarPath = "/vacancies/{company_id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesRead: function (companyId, id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'companyId' is not null or undefined
                    (0, common_1.assertParamExists)('vacanciesRead', 'companyId', companyId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('vacanciesRead', 'id', id);
                    localVarPath = "/vacancies/{company_id}/{id}/"
                        .replace("{".concat("company_id", "}"), encodeURIComponent(String(companyId)))
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    // authentication Basic required
                    // http basic authentication required
                    (0, common_1.setBasicAuthToObject)(localVarRequestOptions, configuration);
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.VacanciesApiAxiosParamCreator = VacanciesApiAxiosParamCreator;
/**
 * VacanciesApi - functional programming interface
 * @export
 */
var VacanciesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.VacanciesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesList: function (companyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.vacanciesList(companyId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesRead: function (companyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.vacanciesRead(companyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.VacanciesApiFp = VacanciesApiFp;
/**
 * VacanciesApi - factory interface
 * @export
 */
var VacanciesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.VacanciesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} companyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesList: function (companyId, options) {
            return localVarFp.vacanciesList(companyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vacanciesRead: function (companyId, id, options) {
            return localVarFp.vacanciesRead(companyId, id, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.VacanciesApiFactory = VacanciesApiFactory;
/**
 * VacanciesApi - object-oriented interface
 * @export
 * @class VacanciesApi
 * @extends {BaseAPI}
 */
var VacanciesApi = /** @class */ (function (_super) {
    __extends(VacanciesApi, _super);
    function VacanciesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VacanciesApi
     */
    VacanciesApi.prototype.vacanciesList = function (companyId, options) {
        var _this = this;
        return (0, exports.VacanciesApiFp)(this.configuration).vacanciesList(companyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VacanciesApi
     */
    VacanciesApi.prototype.vacanciesRead = function (companyId, id, options) {
        var _this = this;
        return (0, exports.VacanciesApiFp)(this.configuration).vacanciesRead(companyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VacanciesApi;
}(base_1.BaseAPI));
exports.VacanciesApi = VacanciesApi;
