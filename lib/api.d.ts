/**
 * HAPI Onboarding API
 * Simple API for handling employer onboarding
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface ATS
 */
export interface ATS {
    /**
     *
     * @type {string}
     * @memberof ATS
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ATS
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface BoardContract
 */
export interface BoardContract {
    /**
     *
     * @type {string}
     * @memberof BoardContract
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof BoardContract
     */
    'jobboard_code': string;
    /**
     *
     * @type {boolean}
     * @memberof BoardContract
     */
    'is_valid'?: boolean;
    /**
     *
     * @type {string}
     * @memberof BoardContract
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof BoardContract
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof BoardContract
     */
    'status'?: BoardContractStatusEnum;
    /**
     *
     * @type {string}
     * @memberof BoardContract
     */
    'state'?: BoardContractStateEnum;
    /**
     *
     * @type {object}
     * @memberof BoardContract
     */
    'credentials'?: object | null;
    /**
     *
     * @type {string}
     * @memberof BoardContract
     */
    'company_subsidiary'?: string | null;
    /**
     *
     * @type {string}
     * @memberof BoardContract
     */
    'company'?: string | null;
}
export declare const BoardContractStatusEnum: {
    readonly InReview: "in_review";
    readonly Active: "active";
    readonly Terminated: "terminated";
};
export declare type BoardContractStatusEnum = typeof BoardContractStatusEnum[keyof typeof BoardContractStatusEnum];
export declare const BoardContractStateEnum: {
    readonly Al: "AL";
    readonly Ak: "AK";
    readonly As: "AS";
    readonly Az: "AZ";
    readonly Ar: "AR";
    readonly Aa: "AA";
    readonly Ae: "AE";
    readonly Ap: "AP";
    readonly Ca: "CA";
    readonly Co: "CO";
    readonly Ct: "CT";
    readonly De: "DE";
    readonly Dc: "DC";
    readonly Fl: "FL";
    readonly Ga: "GA";
    readonly Gu: "GU";
    readonly Hi: "HI";
    readonly Id: "ID";
    readonly Il: "IL";
    readonly In: "IN";
    readonly Ia: "IA";
    readonly Ks: "KS";
    readonly Ky: "KY";
    readonly La: "LA";
    readonly Me: "ME";
    readonly Md: "MD";
    readonly Ma: "MA";
    readonly Mi: "MI";
    readonly Mn: "MN";
    readonly Ms: "MS";
    readonly Mo: "MO";
    readonly Mt: "MT";
    readonly Ne: "NE";
    readonly Nv: "NV";
    readonly Nh: "NH";
    readonly Nj: "NJ";
    readonly Nm: "NM";
    readonly Ny: "NY";
    readonly Nc: "NC";
    readonly Nd: "ND";
    readonly Mp: "MP";
    readonly Oh: "OH";
    readonly Ok: "OK";
    readonly Or: "OR";
    readonly Pa: "PA";
    readonly Pr: "PR";
    readonly Ri: "RI";
    readonly Sc: "SC";
    readonly Sd: "SD";
    readonly Tn: "TN";
    readonly Tx: "TX";
    readonly Ut: "UT";
    readonly Vt: "VT";
    readonly Vi: "VI";
    readonly Va: "VA";
    readonly Wa: "WA";
    readonly Wv: "WV";
    readonly Wi: "WI";
    readonly Wy: "WY";
};
export declare type BoardContractStateEnum = typeof BoardContractStateEnum[keyof typeof BoardContractStateEnum];
/**
 *
 * @export
 * @interface BoardPublic
 */
export interface BoardPublic {
    /**
     *
     * @type {string}
     * @memberof BoardPublic
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BoardPublic
     */
    'code'?: string;
    /**
     *
     * @type {string}
     * @memberof BoardPublic
     */
    'state'?: string;
    /**
     *
     * @type {string}
     * @memberof BoardPublic
     */
    'credentials_schema'?: string;
}
/**
 *
 * @export
 * @interface Company
 */
export interface Company {
    /**
     *
     * @type {ATS}
     * @memberof Company
     */
    'ats': ATS;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'ats_company_id': string;
    /**
     *
     * @type {object}
     * @memberof Company
     */
    'ats_credentials': object;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'career_site_url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'compliance_admin_point_of_contact'?: string | null;
    /**
     *
     * @type {Set<string>}
     * @memberof Company
     */
    'contacts': Set<string>;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'created'?: string;
    /**
     *
     * @type {boolean}
     * @memberof Company
     */
    'failed_audit_in_past_3_years'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'fein'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'hr_point_of_contact'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof Company
     */
    'is_under_conciliation_agreements_with_ofccp'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'is_valid'?: string;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'past_vendor'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'postal_code': string;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'sein'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'status'?: CompanyStatusEnum;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'street_address'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Company
     */
    'uiid'?: string | null;
}
export declare const CompanyStatusEnum: {
    readonly InReview: "in_review";
    readonly Active: "active";
    readonly Terminated: "terminated";
};
export declare type CompanyStatusEnum = typeof CompanyStatusEnum[keyof typeof CompanyStatusEnum];
/**
 *
 * @export
 * @interface CompanySubsidiary
 */
export interface CompanySubsidiary {
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof CompanySubsidiary
     */
    'valid'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'ats_company_id': string;
    /**
     *
     * @type {object}
     * @memberof CompanySubsidiary
     */
    'ats_credentials': object;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'street_address'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'postal_code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'career_site_url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'fein'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'sein'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'uiid'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'status'?: CompanySubsidiaryStatusEnum;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'letter_of_auth_docusign_envelope'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'ats'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'hr_point_of_contact'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'compliance_admin_point_of_contact'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CompanySubsidiary
     */
    'company'?: string | null;
}
export declare const CompanySubsidiaryStatusEnum: {
    readonly InReview: "in_review";
    readonly Active: "active";
    readonly Terminated: "terminated";
};
export declare type CompanySubsidiaryStatusEnum = typeof CompanySubsidiaryStatusEnum[keyof typeof CompanySubsidiaryStatusEnum];
/**
 *
 * @export
 * @interface LiteTransaction
 */
export interface LiteTransaction {
    /**
     *
     * @type {string}
     * @memberof LiteTransaction
     */
    'transaction_id': string;
    /**
     *
     * @type {string}
     * @memberof LiteTransaction
     */
    'transaction_type'?: LiteTransactionTransactionTypeEnum;
    /**
     *
     * @type {string}
     * @memberof LiteTransaction
     */
    'transaction_timestamp'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LiteTransaction
     */
    'distribution_type'?: LiteTransactionDistributionTypeEnum;
    /**
     *
     * @type {string}
     * @memberof LiteTransaction
     */
    'channel'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LiteTransaction
     */
    'confirmation_id'?: string | null;
}
export declare const LiteTransactionTransactionTypeEnum: {
    readonly Receive: "receive";
    readonly Create: "create";
    readonly Wait: "wait";
    readonly Update: "update";
    readonly Delete: "delete";
};
export declare type LiteTransactionTransactionTypeEnum = typeof LiteTransactionTransactionTypeEnum[keyof typeof LiteTransactionTransactionTypeEnum];
export declare const LiteTransactionDistributionTypeEnum: {
    readonly Ofccp: "ofccp";
    readonly Outreach: "outreach";
    readonly DiversityAndInclusion: "diversity_and_inclusion";
};
export declare type LiteTransactionDistributionTypeEnum = typeof LiteTransactionDistributionTypeEnum[keyof typeof LiteTransactionDistributionTypeEnum];
/**
 *
 * @export
 * @interface PointOfContact
 */
export interface PointOfContact {
    /**
     *
     * @type {Array<string>}
     * @memberof PointOfContact
     */
    'companies': Array<string>;
    /**
     *
     * @type {string}
     * @memberof PointOfContact
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof PointOfContact
     */
    'email_address'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PointOfContact
     */
    'full_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PointOfContact
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof PointOfContact
     */
    'is_valid'?: boolean;
    /**
     *
     * @type {string}
     * @memberof PointOfContact
     */
    'job_title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PointOfContact
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof PointOfContact
     */
    'phone_number'?: string | null;
}
/**
 *
 * @export
 * @interface Tier
 */
export interface Tier {
    /**
     *
     * @type {string}
     * @memberof Tier
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Tier
     */
    'name': string;
    /**
     * Tier\'s maximum jobs per year published
     * @type {number}
     * @memberof Tier
     */
    'maximum_vacancies_per_year': number;
    /**
     * Maximum number of jobs before the subscription is deactivated
     * @type {number}
     * @memberof Tier
     */
    'deactivation_limit': number;
    /**
     * Price per entity per year in dollars(ex. VAT), as invoiced to the ATS by VONQ
     * @type {string}
     * @memberof Tier
     */
    'vonq_price': string;
    /**
     * Proposed rate card price per entity per year in dollars (ex. VAT), as invoiced to the employer by the ATS
     * @type {string}
     * @memberof Tier
     */
    'rate_card_price': string;
}
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'apply_url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'ats_company_id': string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'ats_id': string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'channel'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'company_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'confirmation_id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'distribution_type'?: TransactionDistributionTypeEnum;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'error'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'job_location'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'job_title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'outreach_centre_email_address'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'posting_timestamp'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'publication_url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'req_number'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'state'?: TransactionStateEnum;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'transaction_id': string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'transaction_method'?: TransactionTransactionMethodEnum;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'transaction_timestamp'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    'transaction_type'?: TransactionTransactionTypeEnum;
}
export declare const TransactionDistributionTypeEnum: {
    readonly Ofccp: "ofccp";
    readonly Outreach: "outreach";
    readonly DiversityAndInclusion: "diversity_and_inclusion";
};
export declare type TransactionDistributionTypeEnum = typeof TransactionDistributionTypeEnum[keyof typeof TransactionDistributionTypeEnum];
export declare const TransactionStateEnum: {
    readonly Al: "AL";
    readonly Ak: "AK";
    readonly As: "AS";
    readonly Az: "AZ";
    readonly Ar: "AR";
    readonly Aa: "AA";
    readonly Ae: "AE";
    readonly Ap: "AP";
    readonly Ca: "CA";
    readonly Co: "CO";
    readonly Ct: "CT";
    readonly De: "DE";
    readonly Dc: "DC";
    readonly Fl: "FL";
    readonly Ga: "GA";
    readonly Gu: "GU";
    readonly Hi: "HI";
    readonly Id: "ID";
    readonly Il: "IL";
    readonly In: "IN";
    readonly Ia: "IA";
    readonly Ks: "KS";
    readonly Ky: "KY";
    readonly La: "LA";
    readonly Me: "ME";
    readonly Md: "MD";
    readonly Ma: "MA";
    readonly Mi: "MI";
    readonly Mn: "MN";
    readonly Ms: "MS";
    readonly Mo: "MO";
    readonly Mt: "MT";
    readonly Ne: "NE";
    readonly Nv: "NV";
    readonly Nh: "NH";
    readonly Nj: "NJ";
    readonly Nm: "NM";
    readonly Ny: "NY";
    readonly Nc: "NC";
    readonly Nd: "ND";
    readonly Mp: "MP";
    readonly Oh: "OH";
    readonly Ok: "OK";
    readonly Or: "OR";
    readonly Pa: "PA";
    readonly Pr: "PR";
    readonly Ri: "RI";
    readonly Sc: "SC";
    readonly Sd: "SD";
    readonly Tn: "TN";
    readonly Tx: "TX";
    readonly Ut: "UT";
    readonly Vt: "VT";
    readonly Vi: "VI";
    readonly Va: "VA";
    readonly Wa: "WA";
    readonly Wv: "WV";
    readonly Wi: "WI";
    readonly Wy: "WY";
};
export declare type TransactionStateEnum = typeof TransactionStateEnum[keyof typeof TransactionStateEnum];
export declare const TransactionTransactionMethodEnum: {
    readonly Ftp: "ftp";
    readonly Api: "api";
    readonly Xml: "xml";
    readonly Email: "email";
};
export declare type TransactionTransactionMethodEnum = typeof TransactionTransactionMethodEnum[keyof typeof TransactionTransactionMethodEnum];
export declare const TransactionTransactionTypeEnum: {
    readonly Receive: "receive";
    readonly Create: "create";
    readonly Wait: "wait";
    readonly Update: "update";
    readonly Delete: "delete";
};
export declare type TransactionTransactionTypeEnum = typeof TransactionTransactionTypeEnum[keyof typeof TransactionTransactionTypeEnum];
/**
 *
 * @export
 * @interface Vacancy
 */
export interface Vacancy {
    /**
     *
     * @type {string}
     * @memberof Vacancy
     */
    'id'?: string;
    /**
     *
     * @type {Array<LiteTransaction>}
     * @memberof Vacancy
     */
    'transactions': Array<LiteTransaction>;
    /**
     *
     * @type {string}
     * @memberof Vacancy
     */
    'req_number': string;
    /**
     *
     * @type {string}
     * @memberof Vacancy
     */
    'company_name': string;
    /**
     *
     * @type {string}
     * @memberof Vacancy
     */
    'job_location': string;
    /**
     *
     * @type {string}
     * @memberof Vacancy
     */
    'state'?: VacancyStateEnum;
    /**
     *
     * @type {string}
     * @memberof Vacancy
     */
    'job_title': string;
    /**
     *
     * @type {string}
     * @memberof Vacancy
     */
    'apply_url': string;
    /**
     *
     * @type {string}
     * @memberof Vacancy
     */
    'company': string;
}
export declare const VacancyStateEnum: {
    readonly Al: "AL";
    readonly Ak: "AK";
    readonly As: "AS";
    readonly Az: "AZ";
    readonly Ar: "AR";
    readonly Aa: "AA";
    readonly Ae: "AE";
    readonly Ap: "AP";
    readonly Ca: "CA";
    readonly Co: "CO";
    readonly Ct: "CT";
    readonly De: "DE";
    readonly Dc: "DC";
    readonly Fl: "FL";
    readonly Ga: "GA";
    readonly Gu: "GU";
    readonly Hi: "HI";
    readonly Id: "ID";
    readonly Il: "IL";
    readonly In: "IN";
    readonly Ia: "IA";
    readonly Ks: "KS";
    readonly Ky: "KY";
    readonly La: "LA";
    readonly Me: "ME";
    readonly Md: "MD";
    readonly Ma: "MA";
    readonly Mi: "MI";
    readonly Mn: "MN";
    readonly Ms: "MS";
    readonly Mo: "MO";
    readonly Mt: "MT";
    readonly Ne: "NE";
    readonly Nv: "NV";
    readonly Nh: "NH";
    readonly Nj: "NJ";
    readonly Nm: "NM";
    readonly Ny: "NY";
    readonly Nc: "NC";
    readonly Nd: "ND";
    readonly Mp: "MP";
    readonly Oh: "OH";
    readonly Ok: "OK";
    readonly Or: "OR";
    readonly Pa: "PA";
    readonly Pr: "PR";
    readonly Ri: "RI";
    readonly Sc: "SC";
    readonly Sd: "SD";
    readonly Tn: "TN";
    readonly Tx: "TX";
    readonly Ut: "UT";
    readonly Vt: "VT";
    readonly Vi: "VI";
    readonly Va: "VA";
    readonly Wa: "WA";
    readonly Wv: "WV";
    readonly Wi: "WI";
    readonly Wy: "WY";
};
export declare type VacancyStateEnum = typeof VacancyStateEnum[keyof typeof VacancyStateEnum];
/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export declare const CompaniesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} companyId
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsCreate: (companyId: string, data: PointOfContact, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsDelete: (companyId: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsList: (companyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsPartialUpdate: (companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsRead: (companyId: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsUpdate: (companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesCreate: (data: Company, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesDelete: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesPartialUpdate: (id: string, data: Company, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesRead: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsCreate: (companyId: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsDelete: (companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsList: (companyId: string, subsidiaryId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsPartialUpdate: (companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsRead: (companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsUpdate: (companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesCreate: (companyId: string, data: CompanySubsidiary, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesDelete: (companyId: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesList: (companyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesPartialUpdate: (companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesRead: (companyId: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesUpdate: (companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesUpdate: (id: string, data: Company, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint submits for review a company with all details filled.
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitForReview: (id: string, data: Company, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CompaniesApi - functional programming interface
 * @export
 */
export declare const CompaniesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} companyId
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsCreate(companyId: string, data: PointOfContact, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PointOfContact>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsDelete(companyId: string, id: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsList(companyId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<PointOfContact>>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsPartialUpdate(companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PointOfContact>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsRead(companyId: string, id: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PointOfContact>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsUpdate(companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PointOfContact>>;
    /**
     *
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesCreate(data: Company, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Company>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesDelete(id: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesList(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Company>>>;
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesPartialUpdate(id: string, data: Company, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Company>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesRead(id: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Company>>;
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsCreate(companyId: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BoardContract>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsDelete(companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsList(companyId: string, subsidiaryId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<BoardContract>>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsPartialUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BoardContract>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsRead(companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BoardContract>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BoardContract>>;
    /**
     *
     * @param {string} companyId
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesCreate(companyId: string, data: CompanySubsidiary, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CompanySubsidiary>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesDelete(companyId: string, id: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesList(companyId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<CompanySubsidiary>>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesPartialUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CompanySubsidiary>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesRead(companyId: string, id: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CompanySubsidiary>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CompanySubsidiary>>;
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesUpdate(id: string, data: Company, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Company>>;
    /**
     * This endpoint submits for review a company with all details filled.
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitForReview(id: string, data: Company, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * CompaniesApi - factory interface
 * @export
 */
export declare const CompaniesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} companyId
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsCreate(companyId: string, data: PointOfContact, options?: any): AxiosPromise<PointOfContact>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsDelete(companyId: string, id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsList(companyId: string, options?: any): AxiosPromise<Array<PointOfContact>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsPartialUpdate(companyId: string, id: string, data: PointOfContact, options?: any): AxiosPromise<PointOfContact>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsRead(companyId: string, id: string, options?: any): AxiosPromise<PointOfContact>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesContactsUpdate(companyId: string, id: string, data: PointOfContact, options?: any): AxiosPromise<PointOfContact>;
    /**
     *
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesCreate(data: Company, options?: any): AxiosPromise<Company>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesDelete(id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesList(options?: any): AxiosPromise<Array<Company>>;
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesPartialUpdate(id: string, data: Company, options?: any): AxiosPromise<Company>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesRead(id: string, options?: any): AxiosPromise<Company>;
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsCreate(companyId: string, subsidiaryId: string, data: BoardContract, options?: any): AxiosPromise<BoardContract>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsDelete(companyId: string, id: string, subsidiaryId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsList(companyId: string, subsidiaryId: string, options?: any): AxiosPromise<Array<BoardContract>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsPartialUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: any): AxiosPromise<BoardContract>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsRead(companyId: string, id: string, subsidiaryId: string, options?: any): AxiosPromise<BoardContract>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesBoardsUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: any): AxiosPromise<BoardContract>;
    /**
     *
     * @param {string} companyId
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesCreate(companyId: string, data: CompanySubsidiary, options?: any): AxiosPromise<CompanySubsidiary>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesDelete(companyId: string, id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesList(companyId: string, options?: any): AxiosPromise<Array<CompanySubsidiary>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesPartialUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: any): AxiosPromise<CompanySubsidiary>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesRead(companyId: string, id: string, options?: any): AxiosPromise<CompanySubsidiary>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesSubsidiariesUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: any): AxiosPromise<CompanySubsidiary>;
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companiesUpdate(id: string, data: Company, options?: any): AxiosPromise<Company>;
    /**
     * This endpoint submits for review a company with all details filled.
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitForReview(id: string, data: Company, options?: any): AxiosPromise<void>;
};
/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export declare class CompaniesApi extends BaseAPI {
    /**
     *
     * @param {string} companyId
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesContactsCreate(companyId: string, data: PointOfContact, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PointOfContact, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesContactsDelete(companyId: string, id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesContactsList(companyId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PointOfContact[], any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesContactsPartialUpdate(companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PointOfContact, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesContactsRead(companyId: string, id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PointOfContact, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {PointOfContact} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesContactsUpdate(companyId: string, id: string, data: PointOfContact, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PointOfContact, any>>;
    /**
     *
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesCreate(data: Company, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Company, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesDelete(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Company[], any>>;
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesPartialUpdate(id: string, data: Company, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Company, any>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesRead(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Company, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesBoardsCreate(companyId: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BoardContract, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesBoardsDelete(companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesBoardsList(companyId: string, subsidiaryId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BoardContract[], any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesBoardsPartialUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BoardContract, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesBoardsRead(companyId: string, id: string, subsidiaryId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BoardContract, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {string} subsidiaryId
     * @param {BoardContract} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesBoardsUpdate(companyId: string, id: string, subsidiaryId: string, data: BoardContract, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BoardContract, any>>;
    /**
     *
     * @param {string} companyId
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesCreate(companyId: string, data: CompanySubsidiary, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanySubsidiary, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesDelete(companyId: string, id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesList(companyId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanySubsidiary[], any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesPartialUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanySubsidiary, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesRead(companyId: string, id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanySubsidiary, any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {CompanySubsidiary} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesSubsidiariesUpdate(companyId: string, id: string, data: CompanySubsidiary, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanySubsidiary, any>>;
    /**
     *
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    companiesUpdate(id: string, data: Company, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Company, any>>;
    /**
     * This endpoint submits for review a company with all details filled.
     * @param {string} id
     * @param {Company} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    submitForReview(id: string, data: Company, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * GetEnvelopeStatusApi - axios parameter creator
 * @export
 */
export declare const GetEnvelopeStatusApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} envelopeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvelopeStatusRead: (envelopeId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GetEnvelopeStatusApi - functional programming interface
 * @export
 */
export declare const GetEnvelopeStatusApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} envelopeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvelopeStatusRead(envelopeId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * GetEnvelopeStatusApi - factory interface
 * @export
 */
export declare const GetEnvelopeStatusApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} envelopeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvelopeStatusRead(envelopeId: string, options?: any): AxiosPromise<void>;
};
/**
 * GetEnvelopeStatusApi - object-oriented interface
 * @export
 * @class GetEnvelopeStatusApi
 * @extends {BaseAPI}
 */
export declare class GetEnvelopeStatusApi extends BaseAPI {
    /**
     *
     * @param {string} envelopeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetEnvelopeStatusApi
     */
    getEnvelopeStatusRead(envelopeId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * JobboardbystateApi - axios parameter creator
 * @export
 */
export declare const JobboardbystateApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form
     * @summary List job board by state code, including credentials schema
     * @param {string} stateCode
     * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listJobBoardByStateCode: (stateCode: string, stateCode2: 'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI', options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * JobboardbystateApi - functional programming interface
 * @export
 */
export declare const JobboardbystateApiFp: (configuration?: Configuration | undefined) => {
    /**
     *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form
     * @summary List job board by state code, including credentials schema
     * @param {string} stateCode
     * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listJobBoardByStateCode(stateCode: string, stateCode2: 'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI', options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BoardPublic>>;
};
/**
 * JobboardbystateApi - factory interface
 * @export
 */
export declare const JobboardbystateApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form
     * @summary List job board by state code, including credentials schema
     * @param {string} stateCode
     * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listJobBoardByStateCode(stateCode: string, stateCode2: 'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI', options?: any): AxiosPromise<BoardPublic>;
};
/**
 * JobboardbystateApi - object-oriented interface
 * @export
 * @class JobboardbystateApi
 * @extends {BaseAPI}
 */
export declare class JobboardbystateApi extends BaseAPI {
    /**
     *  This endpoint lists the job board used for a given state including the schema for the required credentials. This endpoint is to be used to render the  jobboard credentials onboarding form
     * @summary List job board by state code, including credentials schema
     * @param {string} stateCode
     * @param {'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI'} stateCode2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobboardbystateApi
     */
    listJobBoardByStateCode(stateCode: string, stateCode2: 'AL' | 'AZ' | 'AR' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'AK' | 'HI' | 'AS' | 'GU' | 'MP' | 'PR' | 'VI', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BoardPublic, any>>;
}
/**
 * TiersApi - axios parameter creator
 * @export
 */
export declare const TiersApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tiersList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TiersApi - functional programming interface
 * @export
 */
export declare const TiersApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tiersList(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Tier>>>;
};
/**
 * TiersApi - factory interface
 * @export
 */
export declare const TiersApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tiersList(options?: any): AxiosPromise<Array<Tier>>;
};
/**
 * TiersApi - object-oriented interface
 * @export
 * @class TiersApi
 * @extends {BaseAPI}
 */
export declare class TiersApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TiersApi
     */
    tiersList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tier[], any>>;
}
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {Transaction} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsCreate: (data: Transaction, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsRead: (transactionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {Transaction} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsCreate(data: Transaction, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Transaction>>;
    /**
     *
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsRead(transactionId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Transaction>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {Transaction} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsCreate(data: Transaction, options?: any): AxiosPromise<Transaction>;
    /**
     *
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsRead(transactionId: string, options?: any): AxiosPromise<Transaction>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI {
    /**
     *
     * @param {Transaction} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    transactionsCreate(data: Transaction, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Transaction, any>>;
    /**
     *
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    transactionsRead(transactionId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Transaction, any>>;
}
/**
 * VacanciesApi - axios parameter creator
 * @export
 */
export declare const VacanciesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vacanciesList: (companyId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vacanciesRead: (companyId: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VacanciesApi - functional programming interface
 * @export
 */
export declare const VacanciesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vacanciesList(companyId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Vacancy>>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vacanciesRead(companyId: string, id: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Vacancy>>;
};
/**
 * VacanciesApi - factory interface
 * @export
 */
export declare const VacanciesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vacanciesList(companyId: string, options?: any): AxiosPromise<Array<Vacancy>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vacanciesRead(companyId: string, id: string, options?: any): AxiosPromise<Vacancy>;
};
/**
 * VacanciesApi - object-oriented interface
 * @export
 * @class VacanciesApi
 * @extends {BaseAPI}
 */
export declare class VacanciesApi extends BaseAPI {
    /**
     *
     * @param {string} companyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VacanciesApi
     */
    vacanciesList(companyId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Vacancy[], any>>;
    /**
     *
     * @param {string} companyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VacanciesApi
     */
    vacanciesRead(companyId: string, id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Vacancy, any>>;
}
